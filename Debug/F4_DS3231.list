
F4_DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a38  08004a38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000098  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a70  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000189c  00000000  00000000  00028b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000798  00000000  00000000  0002abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c5a  00000000  00000000  0002b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3dc  00000000  00000000  0004bfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3f21  00000000  00000000  000563c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a2e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002930  00000000  00000000  0011a338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004928 	.word	0x08004928

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004928 	.word	0x08004928

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <BCD2DEC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t BCD2DEC(uint8_t data)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]
	return (data>>4)*10 + (data&0x0f);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4413      	add	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <HAL_I2C_MemRxCpltCallback>:
	Tran_Buffer[5] = DEC2BCD(thang);
	Tran_Buffer[6] = DEC2BCD(nam);
	HAL_I2C_Mem_Write_IT(&hi2c1, DS3231_ADD, 0x00, I2C_MEMADD_SIZE_8BIT, Tran_Buffer, sizeof(Tran_Buffer));
}
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if(hi2c->Instance == I2C1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a22      	ldr	r2, [pc, #136]	; (800068c <HAL_I2C_MemRxCpltCallback+0x98>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d13e      	bne.n	8000684 <HAL_I2C_MemRxCpltCallback+0x90>
	{
		TimeNow.giay = BCD2DEC(Rece_Buffer[0]);
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffd9 	bl	80005c2 <BCD2DEC>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000616:	709a      	strb	r2, [r3, #2]
		TimeNow.phut = BCD2DEC(Rece_Buffer[1]);
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffd0 	bl	80005c2 <BCD2DEC>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000628:	705a      	strb	r2, [r3, #1]
		TimeNow.gio = BCD2DEC(Rece_Buffer[2]);
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ffc7 	bl	80005c2 <BCD2DEC>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800063a:	701a      	strb	r2, [r3, #0]
		TimeNow.thu = BCD2DEC(Rece_Buffer[3]);
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 800063e:	78db      	ldrb	r3, [r3, #3]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffbe 	bl	80005c2 <BCD2DEC>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800064c:	70da      	strb	r2, [r3, #3]
		TimeNow.ngay = BCD2DEC(Rece_Buffer[4]);
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffb5 	bl	80005c2 <BCD2DEC>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800065e:	711a      	strb	r2, [r3, #4]
		TimeNow.thang = BCD2DEC(Rece_Buffer[5]);
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000662:	795b      	ldrb	r3, [r3, #5]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ffac 	bl	80005c2 <BCD2DEC>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000670:	715a      	strb	r2, [r3, #5]
		TimeNow.nam = BCD2DEC(Rece_Buffer[6]);
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8000674:	799b      	ldrb	r3, [r3, #6]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffa3 	bl	80005c2 <BCD2DEC>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8000682:	719a      	strb	r2, [r3, #6]
	}
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40005400 	.word	0x40005400
 8000690:	200000e8 	.word	0x200000e8
 8000694:	200000e0 	.word	0x200000e0

08000698 <GetTime>:
void GetTime()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(&hi2c1, DS3231_ADD, 0x00, I2C_MEMADD_SIZE_8BIT, Rece_Buffer, sizeof(Rece_Buffer));
 800069e:	2307      	movs	r3, #7
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <GetTime+0x20>)
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	2200      	movs	r2, #0
 80006aa:	21d0      	movs	r1, #208	; 0xd0
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <GetTime+0x24>)
 80006ae:	f000 ffa7 	bl	8001600 <HAL_I2C_Mem_Read_IT>
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000e8 	.word	0x200000e8
 80006bc:	2000008c 	.word	0x2000008c

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fac9 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f82b 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f8c1 	bl	8000854 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006d2:	f000 f891 	bl	80007f8 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GetTime();
 80006d6:	f7ff ffdf 	bl	8000698 <GetTime>
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
			  TimeNow.gio,TimeNow.phut,TimeNow.giay,TimeNow.ngay,TimeNow.thang,TimeNow.nam+2000);
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0x5c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
 80006de:	4618      	mov	r0, r3
			  TimeNow.gio,TimeNow.phut,TimeNow.giay,TimeNow.ngay,TimeNow.thang,TimeNow.nam+2000);
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <main+0x5c>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
 80006e4:	461c      	mov	r4, r3
			  TimeNow.gio,TimeNow.phut,TimeNow.giay,TimeNow.ngay,TimeNow.thang,TimeNow.nam+2000);
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0x5c>)
 80006e8:	789b      	ldrb	r3, [r3, #2]
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
 80006ea:	461d      	mov	r5, r3
			  TimeNow.gio,TimeNow.phut,TimeNow.giay,TimeNow.ngay,TimeNow.thang,TimeNow.nam+2000);
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <main+0x5c>)
 80006ee:	791b      	ldrb	r3, [r3, #4]
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
 80006f0:	461a      	mov	r2, r3
			  TimeNow.gio,TimeNow.phut,TimeNow.giay,TimeNow.ngay,TimeNow.thang,TimeNow.nam+2000);
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <main+0x5c>)
 80006f4:	795b      	ldrb	r3, [r3, #5]
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
 80006f6:	4619      	mov	r1, r3
			  TimeNow.gio,TimeNow.phut,TimeNow.giay,TimeNow.ngay,TimeNow.thang,TimeNow.nam+2000);
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <main+0x5c>)
 80006fa:	799b      	ldrb	r3, [r3, #6]
	  printf("Gio: %d - phut: %d - giay: %d - ngay: %d - thang: %d - nam: %d\n",
 80006fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	9101      	str	r1, [sp, #4]
 8000704:	9200      	str	r2, [sp, #0]
 8000706:	462b      	mov	r3, r5
 8000708:	4622      	mov	r2, r4
 800070a:	4601      	mov	r1, r0
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <main+0x60>)
 800070e:	f003 f97d 	bl	8003a0c <iprintf>

	  HAL_Delay(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000716:	f000 fb13 	bl	8000d40 <HAL_Delay>
  {
 800071a:	e7dc      	b.n	80006d6 <main+0x16>
 800071c:	200000e0 	.word	0x200000e0
 8000720:	08004940 	.word	0x08004940

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f962 	bl	80039fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <SystemClock_Config+0xcc>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <SystemClock_Config+0xd0>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000794:	2308      	movs	r3, #8
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000798:	23a8      	movs	r3, #168	; 0xa8
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fcb9 	bl	8003120 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b4:	f000 f8ca 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2105      	movs	r1, #5
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 ff1a 	bl	8003610 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007e2:	f000 f8b3 	bl	800094c <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C1_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_I2C1_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C1_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_I2C1_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_I2C1_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_I2C1_Init+0x50>)
 8000836:	f000 fd9f 	bl	8001378 <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 f884 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000008c 	.word	0x2000008c
 800084c:	40005400 	.word	0x40005400
 8000850:	000186a0 	.word	0x000186a0

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_GPIO_Init+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a26      	ldr	r2, [pc, #152]	; (800090c <MX_GPIO_Init+0xb8>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_GPIO_Init+0xb8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a1f      	ldr	r2, [pc, #124]	; (800090c <MX_GPIO_Init+0xb8>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_GPIO_Init+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_GPIO_Init+0xb8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_GPIO_Init+0xb8>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_GPIO_Init+0xb8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <MX_GPIO_Init+0xb8>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0xbc>)
 80008e2:	f000 fd2f 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0xbc>)
 8000900:	f000 fb84 	bl	800100c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020c00 	.word	0x40020c00

08000914 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;
    for(DataIdx = 0; DataIdx < len; DataIdx ++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e009      	b.n	800093a <_write+0x26>
    { ITM_SendChar(*ptr++); }
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe20 	bl	8000574 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx ++)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf1      	blt.n	8000926 <_write+0x12>
     return len;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <HAL_I2C_MspInit+0xa4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d13b      	bne.n	8000a42 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e6:	23c0      	movs	r3, #192	; 0xc0
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <HAL_I2C_MspInit+0xac>)
 8000a02:	f000 fb03 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2101      	movs	r1, #1
 8000a26:	201f      	movs	r0, #31
 8000a28:	f000 fa89 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a2c:	201f      	movs	r0, #31
 8000a2e:	f000 faa2 	bl	8000f76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2101      	movs	r1, #1
 8000a36:	2020      	movs	r0, #32
 8000a38:	f000 fa81 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f000 fa9a 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f92c 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <I2C1_EV_IRQHandler+0x10>)
 8000ab2:	f000 fe63 	bl	800177c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000008c 	.word	0x2000008c

08000ac0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <I2C1_ER_IRQHandler+0x10>)
 8000ac6:	f000 ffca 	bl	8001a5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000008c 	.word	0x2000008c

08000ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
  }

  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 fefe 	bl	80039a8 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	200000f0 	.word	0x200000f0
 8000be0:	20000108 	.word	0x20000108

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c24:	4c0b      	ldr	r4, [pc, #44]	; (8000c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffd7 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 febd 	bl	80039b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fd41 	bl	80006c0 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c4c:	08004a40 	.word	0x08004a40
  ldr r2, =_sbss
 8000c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c54:	20000108 	.word	0x20000108

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f94f 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe62 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f967 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f92f 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200000f4 	.word	0x200000f4

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200000f4 	.word	0x200000f4

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <__NVIC_SetPriorityGrouping>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d004      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e00c      	b.n	8000fe2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2205      	movs	r2, #5
 8000fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffc:	b2db      	uxtb	r3, r3
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e16b      	b.n	8001300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 815a 	bne.w	80012fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	2b02      	cmp	r3, #2
 800105c:	d130      	bne.n	80010c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d017      	beq.n	80010fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80b4 	beq.w	80012fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b60      	ldr	r3, [pc, #384]	; (8001318 <HAL_GPIO_Init+0x30c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a5f      	ldr	r2, [pc, #380]	; (8001318 <HAL_GPIO_Init+0x30c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_GPIO_Init+0x30c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a5b      	ldr	r2, [pc, #364]	; (800131c <HAL_GPIO_Init+0x310>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_GPIO_Init+0x314>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_GPIO_Init+0x318>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_GPIO_Init+0x31c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x320>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x324>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x328>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x20e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x20a>
 8001212:	2307      	movs	r3, #7
 8001214:	e00e      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001216:	2308      	movs	r3, #8
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121a:	2306      	movs	r3, #6
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x310>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_GPIO_Init+0x334>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a32      	ldr	r2, [pc, #200]	; (8001340 <HAL_GPIO_Init+0x334>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_GPIO_Init+0x334>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_GPIO_Init+0x334>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_GPIO_Init+0x334>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_GPIO_Init+0x334>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_GPIO_Init+0x334>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <HAL_GPIO_Init+0x334>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae90 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40021400 	.word	0x40021400
 8001338:	40021800 	.word	0x40021800
 800133c:	40021c00 	.word	0x40021c00
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e12b      	b.n	80015e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fb02 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013dc:	f002 fad0 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 80013e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a81      	ldr	r2, [pc, #516]	; (80015ec <HAL_I2C_Init+0x274>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d807      	bhi.n	80013fc <HAL_I2C_Init+0x84>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a80      	ldr	r2, [pc, #512]	; (80015f0 <HAL_I2C_Init+0x278>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf94      	ite	ls
 80013f4:	2301      	movls	r3, #1
 80013f6:	2300      	movhi	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	e006      	b.n	800140a <HAL_I2C_Init+0x92>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4a7d      	ldr	r2, [pc, #500]	; (80015f4 <HAL_I2C_Init+0x27c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	bf94      	ite	ls
 8001404:	2301      	movls	r3, #1
 8001406:	2300      	movhi	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0e7      	b.n	80015e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4a78      	ldr	r2, [pc, #480]	; (80015f8 <HAL_I2C_Init+0x280>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0c9b      	lsrs	r3, r3, #18
 800141c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <HAL_I2C_Init+0x274>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d802      	bhi.n	800144c <HAL_I2C_Init+0xd4>
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3301      	adds	r3, #1
 800144a:	e009      	b.n	8001460 <HAL_I2C_Init+0xe8>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	4a69      	ldr	r2, [pc, #420]	; (80015fc <HAL_I2C_Init+0x284>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	099b      	lsrs	r3, r3, #6
 800145e:	3301      	adds	r3, #1
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	430b      	orrs	r3, r1
 8001466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	495c      	ldr	r1, [pc, #368]	; (80015ec <HAL_I2C_Init+0x274>)
 800147c:	428b      	cmp	r3, r1
 800147e:	d819      	bhi.n	80014b4 <HAL_I2C_Init+0x13c>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1e59      	subs	r1, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fbb1 f3f3 	udiv	r3, r1, r3
 800148e:	1c59      	adds	r1, r3, #1
 8001490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001494:	400b      	ands	r3, r1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00a      	beq.n	80014b0 <HAL_I2C_Init+0x138>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1e59      	subs	r1, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ae:	e051      	b.n	8001554 <HAL_I2C_Init+0x1dc>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e04f      	b.n	8001554 <HAL_I2C_Init+0x1dc>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d111      	bne.n	80014e0 <HAL_I2C_Init+0x168>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e58      	subs	r0, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	440b      	add	r3, r1
 80014ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	e012      	b.n	8001506 <HAL_I2C_Init+0x18e>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1e58      	subs	r0, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	0099      	lsls	r1, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Init+0x196>
 800150a:	2301      	movs	r3, #1
 800150c:	e022      	b.n	8001554 <HAL_I2C_Init+0x1dc>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10e      	bne.n	8001534 <HAL_I2C_Init+0x1bc>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e58      	subs	r0, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6859      	ldr	r1, [r3, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	440b      	add	r3, r1
 8001524:	fbb0 f3f3 	udiv	r3, r0, r3
 8001528:	3301      	adds	r3, #1
 800152a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001532:	e00f      	b.n	8001554 <HAL_I2C_Init+0x1dc>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	0099      	lsls	r1, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	6809      	ldr	r1, [r1, #0]
 8001558:	4313      	orrs	r3, r2
 800155a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6911      	ldr	r1, [r2, #16]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68d2      	ldr	r2, [r2, #12]
 800158e:	4311      	orrs	r1, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	430b      	orrs	r3, r1
 8001596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	000186a0 	.word	0x000186a0
 80015f0:	001e847f 	.word	0x001e847f
 80015f4:	003d08ff 	.word	0x003d08ff
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	10624dd3 	.word	0x10624dd3

08001600 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	817b      	strh	r3, [r7, #10]
 8001612:	460b      	mov	r3, r1
 8001614:	813b      	strh	r3, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b20      	cmp	r3, #32
 8001628:	f040 809a 	bne.w	8001760 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_I2C_Mem_Read_IT+0x170>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	4a50      	ldr	r2, [pc, #320]	; (8001774 <HAL_I2C_Mem_Read_IT+0x174>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	0a1a      	lsrs	r2, r3, #8
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	009a      	lsls	r2, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3b01      	subs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e070      	b.n	8001762 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d0db      	beq.n	8001646 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_I2C_Mem_Read_IT+0x9c>
 8001698:	2302      	movs	r3, #2
 800169a:	e062      	b.n	8001762 <HAL_I2C_Mem_Read_IT+0x162>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d007      	beq.n	80016c2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2222      	movs	r2, #34	; 0x22
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a3a      	ldr	r2, [r7, #32]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_I2C_Mem_Read_IT+0x178>)
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001704:	897a      	ldrh	r2, [r7, #10]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800170a:	893a      	ldrh	r2, [r7, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001710:	88fa      	ldrh	r2, [r7, #6]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800172a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800173a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800175a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001760:	2302      	movs	r3, #2
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000
 8001774:	14f8b589 	.word	0x14f8b589
 8001778:	ffff0000 	.word	0xffff0000

0800177c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800179c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d003      	beq.n	80017b4 <HAL_I2C_EV_IRQHandler+0x38>
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b40      	cmp	r3, #64	; 0x40
 80017b0:	f040 80c1 	bne.w	8001936 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10d      	bne.n	80017ea <HAL_I2C_EV_IRQHandler+0x6e>
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80017d4:	d003      	beq.n	80017de <HAL_I2C_EV_IRQHandler+0x62>
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_EV_IRQHandler+0x66>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_I2C_EV_IRQHandler+0x68>
 80017e2:	2300      	movs	r3, #0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	f000 8132 	beq.w	8001a4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <HAL_I2C_EV_IRQHandler+0x92>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	0a5b      	lsrs	r3, r3, #9
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f001 fc71 	bl	80030e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fd79 	bl	80022fe <I2C_Master_SB>
 800180c:	e092      	b.n	8001934 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_I2C_EV_IRQHandler+0xb2>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	0a5b      	lsrs	r3, r3, #9
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fdef 	bl	800240a <I2C_Master_ADD10>
 800182c:	e082      	b.n	8001934 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0xd2>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	0a5b      	lsrs	r3, r3, #9
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fe09 	bl	800245e <I2C_Master_ADDR>
 800184c:	e072      	b.n	8001934 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03b      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001868:	f000 80f3 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	09db      	lsrs	r3, r3, #7
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00f      	beq.n	8001898 <HAL_I2C_EV_IRQHandler+0x11c>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	0a9b      	lsrs	r3, r3, #10
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_I2C_EV_IRQHandler+0x11c>
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d103      	bne.n	8001898 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f9e9 	bl	8001c68 <I2C_MasterTransmit_TXE>
 8001896:	e04d      	b.n	8001934 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80d6 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	0a5b      	lsrs	r3, r3, #9
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80cf 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	2b21      	cmp	r3, #33	; 0x21
 80018b8:	d103      	bne.n	80018c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fa70 	bl	8001da0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018c0:	e0c7      	b.n	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	f040 80c4 	bne.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fade 	bl	8001e8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d0:	e0bf      	b.n	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e0:	f000 80b7 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00f      	beq.n	8001910 <HAL_I2C_EV_IRQHandler+0x194>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	0a9b      	lsrs	r3, r3, #10
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <HAL_I2C_EV_IRQHandler+0x194>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fb53 	bl	8001fb4 <I2C_MasterReceive_RXNE>
 800190e:	e011      	b.n	8001934 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 809a 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0a5b      	lsrs	r3, r3, #9
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8093 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fbfc 	bl	800212a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001932:	e08e      	b.n	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001934:	e08d      	b.n	8001a52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e007      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d012      	beq.n	800198a <HAL_I2C_EV_IRQHandler+0x20e>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	0a5b      	lsrs	r3, r3, #9
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00c      	beq.n	800198a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001980:	69b9      	ldr	r1, [r7, #24]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 ffba 	bl	80028fc <I2C_Slave_ADDR>
 8001988:	e066      	b.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_I2C_EV_IRQHandler+0x22e>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	0a5b      	lsrs	r3, r3, #9
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fff4 	bl	8002990 <I2C_Slave_STOPF>
 80019a8:	e056      	b.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	2b21      	cmp	r3, #33	; 0x21
 80019ae:	d002      	beq.n	80019b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80019b0:	7bbb      	ldrb	r3, [r7, #14]
 80019b2:	2b29      	cmp	r3, #41	; 0x29
 80019b4:	d125      	bne.n	8001a02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	09db      	lsrs	r3, r3, #7
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00f      	beq.n	80019e2 <HAL_I2C_EV_IRQHandler+0x266>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	0a9b      	lsrs	r3, r3, #10
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_I2C_EV_IRQHandler+0x266>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fed0 	bl	8002780 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019e0:	e039      	b.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d033      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2da>
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	0a5b      	lsrs	r3, r3, #9
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d02d      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fefd 	bl	80027fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a00:	e029      	b.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00f      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	0a9b      	lsrs	r3, r3, #10
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 ff08 	bl	800283c <I2C_SlaveReceive_RXNE>
 8001a2c:	e014      	b.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00e      	beq.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	0a5b      	lsrs	r3, r3, #9
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 ff36 	bl	80028b8 <I2C_SlaveReceive_BTF>
 8001a4c:	e004      	b.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b08a      	sub	sp, #40	; 0x28
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00e      	beq.n	8001aac <HAL_I2C_ER_IRQHandler+0x4e>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001aaa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	0a5b      	lsrs	r3, r3, #9
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_I2C_ER_IRQHandler+0x78>
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	f043 0302 	orr.w	r3, r3, #2
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ad4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	0a9b      	lsrs	r3, r3, #10
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03f      	beq.n	8001b62 <HAL_I2C_ER_IRQHandler+0x104>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d039      	beq.n	8001b62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001aee:	7efb      	ldrb	r3, [r7, #27]
 8001af0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b08:	7ebb      	ldrb	r3, [r7, #26]
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d112      	bne.n	8001b34 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10f      	bne.n	8001b34 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b14:	7cfb      	ldrb	r3, [r7, #19]
 8001b16:	2b21      	cmp	r3, #33	; 0x21
 8001b18:	d008      	beq.n	8001b2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b1a:	7cfb      	ldrb	r3, [r7, #19]
 8001b1c:	2b29      	cmp	r3, #41	; 0x29
 8001b1e:	d005      	beq.n	8001b2c <HAL_I2C_ER_IRQHandler+0xce>
 8001b20:	7cfb      	ldrb	r3, [r7, #19]
 8001b22:	2b28      	cmp	r3, #40	; 0x28
 8001b24:	d106      	bne.n	8001b34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b21      	cmp	r3, #33	; 0x21
 8001b2a:	d103      	bne.n	8001b34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f001 f85f 	bl	8002bf0 <I2C_Slave_AF>
 8001b32:	e016      	b.n	8001b62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b46:	7efb      	ldrb	r3, [r7, #27]
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d002      	beq.n	8001b52 <HAL_I2C_ER_IRQHandler+0xf4>
 8001b4c:	7efb      	ldrb	r3, [r7, #27]
 8001b4e:	2b40      	cmp	r3, #64	; 0x40
 8001b50:	d107      	bne.n	8001b62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	0adb      	lsrs	r3, r3, #11
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <HAL_I2C_ER_IRQHandler+0x12e>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001b8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f001 f896 	bl	8002cd0 <I2C_ITError>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d150      	bne.n	8001d30 <I2C_MasterTransmit_TXE+0xc8>
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b21      	cmp	r3, #33	; 0x21
 8001c92:	d14d      	bne.n	8001d30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d01d      	beq.n	8001cd6 <I2C_MasterTransmit_TXE+0x6e>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d01a      	beq.n	8001cd6 <I2C_MasterTransmit_TXE+0x6e>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ca6:	d016      	beq.n	8001cd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cb6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2211      	movs	r2, #17
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff6c 	bl	8001bac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cd4:	e060      	b.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ce4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	d107      	bne.n	8001d20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff87 	bl	8001c2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d1e:	e03b      	b.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff3f 	bl	8001bac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2e:	e033      	b.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b21      	cmp	r3, #33	; 0x21
 8001d34:	d005      	beq.n	8001d42 <I2C_MasterTransmit_TXE+0xda>
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d12d      	bne.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b22      	cmp	r3, #34	; 0x22
 8001d40:	d12a      	bne.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d5c:	e01c      	b.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d103      	bne.n	8001d72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f88e 	bl	8001e8c <I2C_MemoryTransmit_TXE_BTF>
}
 8001d70:	e012      	b.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d96:	e7ff      	b.n	8001d98 <I2C_MasterTransmit_TXE+0x130>
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b21      	cmp	r3, #33	; 0x21
 8001db8:	d164      	bne.n	8001e84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d012      	beq.n	8001dea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001de8:	e04c      	b.n	8001e84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d01d      	beq.n	8001e2c <I2C_MasterTransmit_BTF+0x8c>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d01a      	beq.n	8001e2c <I2C_MasterTransmit_BTF+0x8c>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dfc:	d016      	beq.n	8001e2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2211      	movs	r2, #17
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fec1 	bl	8001bac <HAL_I2C_MasterTxCpltCallback>
}
 8001e2a:	e02b      	b.n	8001e84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b40      	cmp	r3, #64	; 0x40
 8001e64:	d107      	bne.n	8001e76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fedc 	bl	8001c2c <HAL_I2C_MemTxCpltCallback>
}
 8001e74:	e006      	b.n	8001e84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe94 	bl	8001bac <HAL_I2C_MasterTxCpltCallback>
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11d      	bne.n	8001ee0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10b      	bne.n	8001ec4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebc:	1c9a      	adds	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001ec2:	e073      	b.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	121b      	asrs	r3, r3, #8
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ede:	e065      	b.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10b      	bne.n	8001f00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001efe:	e055      	b.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d151      	bne.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b22      	cmp	r3, #34	; 0x22
 8001f0c:	d10d      	bne.n	8001f2a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f28:	e040      	b.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b21      	cmp	r3, #33	; 0x21
 8001f38:	d112      	bne.n	8001f60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f5e:	e025      	b.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d120      	bne.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b21      	cmp	r3, #33	; 0x21
 8001f6e:	d11d      	bne.n	8001fac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f7e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe40 	bl	8001c2c <HAL_I2C_MemTxCpltCallback>
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b22      	cmp	r3, #34	; 0x22
 8001fc6:	f040 80ac 	bne.w	8002122 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d921      	bls.n	800201c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b03      	cmp	r3, #3
 8002006:	f040 808c 	bne.w	8002122 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002018:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800201a:	e082      	b.n	8002122 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	2b02      	cmp	r3, #2
 8002022:	d075      	beq.n	8002110 <I2C_MasterReceive_RXNE+0x15c>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d002      	beq.n	8002030 <I2C_MasterReceive_RXNE+0x7c>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d16f      	bne.n	8002110 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 f827 	bl	8003084 <I2C_WaitOnSTOPRequestThroughIT>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d142      	bne.n	80020c2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800205a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d10a      	bne.n	80020ac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe faa5 	bl	80005f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020aa:	e03a      	b.n	8002122 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2212      	movs	r2, #18
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fd80 	bl	8001bc0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020c0:	e02f      	b.n	8002122 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fd99 	bl	8001c40 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800210e:	e008      	b.n	8002122 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211e:	605a      	str	r2, [r3, #4]
}
 8002120:	e7ff      	b.n	8002122 <I2C_MasterReceive_RXNE+0x16e>
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b04      	cmp	r3, #4
 8002140:	d11b      	bne.n	800217a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002150:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002178:	e0bd      	b.n	80022f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d129      	bne.n	80021d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002192:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d00a      	beq.n	80021b0 <I2C_MasterReceive_BTF+0x86>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d007      	beq.n	80021b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021d6:	e08e      	b.n	80022f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d176      	bne.n	80022d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d002      	beq.n	80021ee <I2C_MasterReceive_BTF+0xc4>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d108      	bne.n	8002200 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e019      	b.n	8002234 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d002      	beq.n	800220c <I2C_MasterReceive_BTF+0xe2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d108      	bne.n	800221e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e00a      	b.n	8002234 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b10      	cmp	r3, #16
 8002222:	d007      	beq.n	8002234 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002232:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800228e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d10a      	bne.n	80022ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe f99e 	bl	80005f4 <HAL_I2C_MemRxCpltCallback>
}
 80022b8:	e01d      	b.n	80022f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2212      	movs	r2, #18
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fc79 	bl	8001bc0 <HAL_I2C_MasterRxCpltCallback>
}
 80022ce:	e012      	b.n	80022f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b40      	cmp	r3, #64	; 0x40
 8002310:	d117      	bne.n	8002342 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800232a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800232c:	e067      	b.n	80023fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]
}
 8002340:	e05d      	b.n	80023fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800234a:	d133      	bne.n	80023b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b21      	cmp	r3, #33	; 0x21
 8002356:	d109      	bne.n	800236c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	e008      	b.n	800237e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <I2C_Master_SB+0x92>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <I2C_Master_SB+0x100>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02d      	beq.n	80023fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b0:	605a      	str	r2, [r3, #4]
}
 80023b2:	e024      	b.n	80023fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10e      	bne.n	80023da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	11db      	asrs	r3, r3, #7
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 0306 	and.w	r3, r3, #6
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f063 030f 	orn	r3, r3, #15
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]
}
 80023d8:	e011      	b.n	80023fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10d      	bne.n	80023fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	11db      	asrs	r3, r3, #7
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 0306 	and.w	r3, r3, #6
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f063 030e 	orn	r3, r3, #14
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	611a      	str	r2, [r3, #16]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	b2da      	uxtb	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <I2C_Master_ADD10+0x26>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00c      	beq.n	8002452 <I2C_Master_ADD10+0x48>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002450:	605a      	str	r2, [r3, #4]
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800245e:	b480      	push	{r7}
 8002460:	b091      	sub	sp, #68	; 0x44
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b22      	cmp	r3, #34	; 0x22
 8002486:	f040 8169 	bne.w	800275c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <I2C_Master_ADDR+0x54>
 8002492:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d10b      	bne.n	80024b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	e160      	b.n	8002774 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11d      	bne.n	80024f6 <I2C_Master_ADDR+0x98>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024c2:	d118      	bne.n	80024f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	651a      	str	r2, [r3, #80]	; 0x50
 80024f4:	e13e      	b.n	8002774 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d113      	bne.n	8002528 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e115      	b.n	8002754 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 808a 	bne.w	8002648 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800253a:	d137      	bne.n	80025ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255a:	d113      	bne.n	8002584 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	e0e7      	b.n	8002754 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e0d3      	b.n	8002754 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d02e      	beq.n	8002610 <I2C_Master_ADDR+0x1b2>
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d02b      	beq.n	8002610 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d102      	bne.n	80025c4 <I2C_Master_ADDR+0x166>
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d125      	bne.n	8002610 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00e      	beq.n	80025e8 <I2C_Master_ADDR+0x18a>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d00b      	beq.n	80025e8 <I2C_Master_ADDR+0x18a>
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d008      	beq.n	80025e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e007      	b.n	80025f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	e0a1      	b.n	8002754 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e085      	b.n	8002754 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d14d      	bne.n	80026ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2b04      	cmp	r3, #4
 8002656:	d016      	beq.n	8002686 <I2C_Master_ADDR+0x228>
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	2b02      	cmp	r3, #2
 800265c:	d013      	beq.n	8002686 <I2C_Master_ADDR+0x228>
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2b10      	cmp	r3, #16
 8002662:	d010      	beq.n	8002686 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e007      	b.n	8002696 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002694:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a4:	d117      	bne.n	80026d6 <I2C_Master_ADDR+0x278>
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026ac:	d00b      	beq.n	80026c6 <I2C_Master_ADDR+0x268>
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d008      	beq.n	80026c6 <I2C_Master_ADDR+0x268>
 80026b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d005      	beq.n	80026c6 <I2C_Master_ADDR+0x268>
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d002      	beq.n	80026c6 <I2C_Master_ADDR+0x268>
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d107      	bne.n	80026d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	e032      	b.n	8002754 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800270c:	d117      	bne.n	800273e <I2C_Master_ADDR+0x2e0>
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002714:	d00b      	beq.n	800272e <I2C_Master_ADDR+0x2d0>
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	2b01      	cmp	r3, #1
 800271a:	d008      	beq.n	800272e <I2C_Master_ADDR+0x2d0>
 800271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271e:	2b08      	cmp	r3, #8
 8002720:	d005      	beq.n	800272e <I2C_Master_ADDR+0x2d0>
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	2b10      	cmp	r3, #16
 8002726:	d002      	beq.n	800272e <I2C_Master_ADDR+0x2d0>
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	2b20      	cmp	r3, #32
 800272c:	d107      	bne.n	800273e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800273c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800275a:	e00b      	b.n	8002774 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
}
 8002772:	e7ff      	b.n	8002774 <I2C_Master_ADDR+0x316>
 8002774:	bf00      	nop
 8002776:	3744      	adds	r7, #68	; 0x44
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02b      	beq.n	80027f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d114      	bne.n	80027f2 <I2C_SlaveTransmit_TXE+0x72>
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b29      	cmp	r3, #41	; 0x29
 80027cc:	d111      	bne.n	80027f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2221      	movs	r2, #33	; 0x21
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2228      	movs	r2, #40	; 0x28
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff f9f1 	bl	8001bd4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d011      	beq.n	8002830 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02c      	beq.n	80028b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d114      	bne.n	80028b0 <I2C_SlaveReceive_RXNE+0x74>
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b2a      	cmp	r3, #42	; 0x2a
 800288a:	d111      	bne.n	80028b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2222      	movs	r2, #34	; 0x22
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2228      	movs	r2, #40	; 0x28
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff f99c 	bl	8001be8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002916:	2b28      	cmp	r3, #40	; 0x28
 8002918:	d127      	bne.n	800296a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	09db      	lsrs	r3, r3, #7
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	81bb      	strh	r3, [r7, #12]
 800294c:	e002      	b.n	8002954 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800295c:	89ba      	ldrh	r2, [r7, #12]
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff f94a 	bl	8001bfc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002968:	e00e      	b.n	8002988 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ec:	d172      	bne.n	8002ad4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b22      	cmp	r3, #34	; 0x22
 80029f2:	d002      	beq.n	80029fa <I2C_Slave_STOPF+0x6a>
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b2a      	cmp	r3, #42	; 0x2a
 80029f8:	d135      	bne.n	8002a66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fadb 	bl	8000fee <HAL_DMA_GetState>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d049      	beq.n	8002ad2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <I2C_Slave_STOPF+0x258>)
 8002a44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe faad 	bl	8000faa <HAL_DMA_Abort_IT>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d03d      	beq.n	8002ad2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a60:	4610      	mov	r0, r2
 8002a62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a64:	e035      	b.n	8002ad2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0204 	orr.w	r2, r3, #4
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe faa5 	bl	8000fee <HAL_DMA_GetState>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d014      	beq.n	8002ad4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	4a4e      	ldr	r2, [pc, #312]	; (8002be8 <I2C_Slave_STOPF+0x258>)
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fa77 	bl	8000faa <HAL_DMA_Abort_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002acc:	4610      	mov	r0, r2
 8002ace:	4798      	blx	r3
 8002ad0:	e000      	b.n	8002ad4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ad2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d03e      	beq.n	8002b5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d112      	bne.n	8002b12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d112      	bne.n	8002b46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f043 0204 	orr.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f8b3 	bl	8002cd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b6a:	e039      	b.n	8002be0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b70:	d109      	bne.n	8002b86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2228      	movs	r2, #40	; 0x28
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff f831 	bl	8001be8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b28      	cmp	r3, #40	; 0x28
 8002b90:	d111      	bne.n	8002bb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <I2C_Slave_STOPF+0x25c>)
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff f832 	bl	8001c18 <HAL_I2C_ListenCpltCallback>
}
 8002bb4:	e014      	b.n	8002be0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	2b22      	cmp	r3, #34	; 0x22
 8002bbc:	d002      	beq.n	8002bc4 <I2C_Slave_STOPF+0x234>
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b22      	cmp	r3, #34	; 0x22
 8002bc2:	d10d      	bne.n	8002be0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff f804 	bl	8001be8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08002f35 	.word	0x08002f35
 8002bec:	ffff0000 	.word	0xffff0000

08002bf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d002      	beq.n	8002c12 <I2C_Slave_AF+0x22>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d129      	bne.n	8002c66 <I2C_Slave_AF+0x76>
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b28      	cmp	r3, #40	; 0x28
 8002c16:	d126      	bne.n	8002c66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <I2C_Slave_AF+0xdc>)
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe ffda 	bl	8001c18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c64:	e02e      	b.n	8002cc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b21      	cmp	r3, #33	; 0x21
 8002c6a:	d126      	bne.n	8002cba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <I2C_Slave_AF+0xdc>)
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe ff8e 	bl	8001bd4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002cb8:	e004      	b.n	8002cc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc2:	615a      	str	r2, [r3, #20]
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	ffff0000 	.word	0xffff0000

08002cd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d002      	beq.n	8002cf4 <I2C_ITError+0x24>
 8002cee:	7bbb      	ldrb	r3, [r7, #14]
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d10a      	bne.n	8002d0a <I2C_ITError+0x3a>
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b22      	cmp	r3, #34	; 0x22
 8002cf8:	d107      	bne.n	8002d0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d10:	2b28      	cmp	r3, #40	; 0x28
 8002d12:	d107      	bne.n	8002d24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2228      	movs	r2, #40	; 0x28
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d22:	e015      	b.n	8002d50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d32:	d00a      	beq.n	8002d4a <I2C_ITError+0x7a>
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b60      	cmp	r3, #96	; 0x60
 8002d38:	d007      	beq.n	8002d4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5e:	d162      	bne.n	8002e26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d020      	beq.n	8002dc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <I2C_ITError+0x25c>)
 8002d84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe f90d 	bl	8000faa <HAL_DMA_Abort_IT>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8089 	beq.w	8002eaa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4798      	blx	r3
 8002dbe:	e074      	b.n	8002eaa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	4a59      	ldr	r2, [pc, #356]	; (8002f2c <I2C_ITError+0x25c>)
 8002dc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8ec 	bl	8000faa <HAL_DMA_Abort_IT>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d068      	beq.n	8002eaa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d10b      	bne.n	8002dfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	4610      	mov	r0, r2
 8002e22:	4798      	blx	r3
 8002e24:	e041      	b.n	8002eaa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b60      	cmp	r3, #96	; 0x60
 8002e30:	d125      	bne.n	8002e7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d10b      	bne.n	8002e66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe feec 	bl	8001c54 <HAL_I2C_AbortCpltCallback>
 8002e7c:	e015      	b.n	8002eaa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d10b      	bne.n	8002ea4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fe fecb 	bl	8001c40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10e      	bne.n	8002ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d104      	bne.n	8002ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d113      	bne.n	8002f24 <I2C_ITError+0x254>
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b28      	cmp	r3, #40	; 0x28
 8002f00:	d110      	bne.n	8002f24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <I2C_ITError+0x260>)
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fe7a 	bl	8001c18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	08002f35 	.word	0x08002f35
 8002f30:	ffff0000 	.word	0xffff0000

08002f34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <I2C_DMAAbort+0x148>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <I2C_DMAAbort+0x14c>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0a1a      	lsrs	r2, r3, #8
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00da      	lsls	r2, r3, #3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002f7a:	e00a      	b.n	8002f92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d0ea      	beq.n	8002f68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	2200      	movs	r2, #0
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b60      	cmp	r3, #96	; 0x60
 8003002:	d10e      	bne.n	8003022 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800301a:	6978      	ldr	r0, [r7, #20]
 800301c:	f7fe fe1a 	bl	8001c54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003020:	e027      	b.n	8003072 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003028:	2b28      	cmp	r3, #40	; 0x28
 800302a:	d117      	bne.n	800305c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800304a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2228      	movs	r2, #40	; 0x28
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800305a:	e007      	b.n	800306c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f7fe fde7 	bl	8001c40 <HAL_I2C_ErrorCallback>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000000 	.word	0x20000000
 8003080:	14f8b589 	.word	0x14f8b589

08003084 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0a1a      	lsrs	r2, r3, #8
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e008      	b.n	80030d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d0:	d0e9      	beq.n	80030a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20000000 	.word	0x20000000
 80030e4:	14f8b589 	.word	0x14f8b589

080030e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030f8:	d103      	bne.n	8003102 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003100:	e007      	b.n	8003112 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800310a:	d102      	bne.n	8003112 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2208      	movs	r2, #8
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e267      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d075      	beq.n	800322a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b04      	cmp	r3, #4
 8003148:	d00c      	beq.n	8003164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b85      	ldr	r3, [pc, #532]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003152:	2b08      	cmp	r3, #8
 8003154:	d112      	bne.n	800317c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b82      	ldr	r3, [pc, #520]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003162:	d10b      	bne.n	800317c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	4b7e      	ldr	r3, [pc, #504]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05b      	beq.n	8003228 <HAL_RCC_OscConfig+0x108>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d157      	bne.n	8003228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e242      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d106      	bne.n	8003194 <HAL_RCC_OscConfig+0x74>
 8003186:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e01d      	b.n	80031d0 <HAL_RCC_OscConfig+0xb0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x98>
 800319e:	4b70      	ldr	r3, [pc, #448]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6f      	ldr	r2, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b6d      	ldr	r3, [pc, #436]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6c      	ldr	r2, [pc, #432]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0xb0>
 80031b8:	4b69      	ldr	r3, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a68      	ldr	r2, [pc, #416]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a65      	ldr	r2, [pc, #404]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fd fda6 	bl	8000d28 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fd fda2 	bl	8000d28 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e207      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xc0>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd fd92 	bl	8000d28 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fd fd8e 	bl	8000d28 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1f3      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	4b51      	ldr	r3, [pc, #324]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0xe8>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003236:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324a:	2b08      	cmp	r3, #8
 800324c:	d11c      	bne.n	8003288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b44      	ldr	r3, [pc, #272]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d116      	bne.n	8003288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x152>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1c7      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4937      	ldr	r1, [pc, #220]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	e03a      	b.n	80032fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003290:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCC_OscConfig+0x244>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fd fd47 	bl	8000d28 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329e:	f7fd fd43 	bl	8000d28 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1a8      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4925      	ldr	r1, [pc, #148]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_OscConfig+0x244>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd fd26 	bl	8000d28 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fd fd22 	bl	8000d28 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e187      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d036      	beq.n	8003378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_RCC_OscConfig+0x248>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fd fd06 	bl	8000d28 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003320:	f7fd fd02 	bl	8000d28 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e167      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x240>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x200>
 800333e:	e01b      	b.n	8003378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_OscConfig+0x248>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fd fcef 	bl	8000d28 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	e00e      	b.n	800336c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334e:	f7fd fceb 	bl	8000d28 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d907      	bls.n	800336c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e150      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
 8003360:	40023800 	.word	0x40023800
 8003364:	42470000 	.word	0x42470000
 8003368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ea      	bne.n	800334e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8097 	beq.w	80034b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b7d      	ldr	r3, [pc, #500]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a7c      	ldr	r2, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0x474>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b74      	ldr	r3, [pc, #464]	; (8003594 <HAL_RCC_OscConfig+0x474>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a73      	ldr	r2, [pc, #460]	; (8003594 <HAL_RCC_OscConfig+0x474>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fcab 	bl	8000d28 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fd fca7 	bl	8000d28 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e10c      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x474>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x2ea>
 80033fc:	4b64      	ldr	r3, [pc, #400]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a63      	ldr	r2, [pc, #396]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x324>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x30c>
 8003412:	4b5f      	ldr	r3, [pc, #380]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a5e      	ldr	r2, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a5b      	ldr	r2, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0x324>
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	4b55      	ldr	r3, [pc, #340]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a54      	ldr	r2, [pc, #336]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 0304 	bic.w	r3, r3, #4
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fd fc6c 	bl	8000d28 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fd fc68 	bl	8000d28 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0cb      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	4b49      	ldr	r3, [pc, #292]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ee      	beq.n	8003454 <HAL_RCC_OscConfig+0x334>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fd fc56 	bl	8000d28 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fd fc52 	bl	8000d28 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0b5      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ee      	bne.n	8003480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a38      	ldr	r2, [pc, #224]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a1 	beq.w	8003600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d05c      	beq.n	8003584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d141      	bne.n	8003556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b31      	ldr	r3, [pc, #196]	; (8003598 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd fc26 	bl	8000d28 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd fc22 	bl	8000d28 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e087      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	491b      	ldr	r1, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x478>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fd fbfb 	bl	8000d28 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd fbf7 	bl	8000d28 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e05c      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x416>
 8003554:	e054      	b.n	8003600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_RCC_OscConfig+0x478>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd fbe4 	bl	8000d28 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd fbe0 	bl	8000d28 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e045      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x470>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x444>
 8003582:	e03d      	b.n	8003600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e038      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	40007000 	.word	0x40007000
 8003598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d028      	beq.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d121      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d11a      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d111      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	3b01      	subs	r3, #1
 80035e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0cc      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b68      	ldr	r3, [pc, #416]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d90c      	bls.n	800364c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d044      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d119      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e067      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4934      	ldr	r1, [pc, #208]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fd fb12 	bl	8000d28 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fd fb0e 	bl	8000d28 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d20c      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fa72 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00
 80037cc:	40023800 	.word	0x40023800
 80037d0:	08004980 	.word	0x08004980
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000004 	.word	0x20000004

080037dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e0:	b090      	sub	sp, #64	; 0x40
 80037e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
 80037e8:	2300      	movs	r3, #0
 80037ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ec:	2300      	movs	r3, #0
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f4:	4b59      	ldr	r3, [pc, #356]	; (800395c <HAL_RCC_GetSysClockFreq+0x180>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d00d      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x40>
 8003800:	2b08      	cmp	r3, #8
 8003802:	f200 80a1 	bhi.w	8003948 <HAL_RCC_GetSysClockFreq+0x16c>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x34>
 800380a:	2b04      	cmp	r3, #4
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x3a>
 800380e:	e09b      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_GetSysClockFreq+0x184>)
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003814:	e09b      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003816:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_GetSysClockFreq+0x188>)
 8003818:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800381a:	e098      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800381c:	4b4f      	ldr	r3, [pc, #316]	; (800395c <HAL_RCC_GetSysClockFreq+0x180>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003826:	4b4d      	ldr	r3, [pc, #308]	; (800395c <HAL_RCC_GetSysClockFreq+0x180>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d028      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003832:	4b4a      	ldr	r3, [pc, #296]	; (800395c <HAL_RCC_GetSysClockFreq+0x180>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	2200      	movs	r2, #0
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	627a      	str	r2, [r7, #36]	; 0x24
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003844:	2100      	movs	r1, #0
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_GetSysClockFreq+0x188>)
 8003848:	fb03 f201 	mul.w	r2, r3, r1
 800384c:	2300      	movs	r3, #0
 800384e:	fb00 f303 	mul.w	r3, r0, r3
 8003852:	4413      	add	r3, r2
 8003854:	4a43      	ldr	r2, [pc, #268]	; (8003964 <HAL_RCC_GetSysClockFreq+0x188>)
 8003856:	fba0 1202 	umull	r1, r2, r0, r2
 800385a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800385c:	460a      	mov	r2, r1
 800385e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003862:	4413      	add	r3, r2
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	2200      	movs	r2, #0
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	61fa      	str	r2, [r7, #28]
 800386e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003872:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003876:	f7fc fcfb 	bl	8000270 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4613      	mov	r3, r2
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003882:	e053      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003884:	4b35      	ldr	r3, [pc, #212]	; (800395c <HAL_RCC_GetSysClockFreq+0x180>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	2200      	movs	r2, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	617a      	str	r2, [r7, #20]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003896:	f04f 0b00 	mov.w	fp, #0
 800389a:	4652      	mov	r2, sl
 800389c:	465b      	mov	r3, fp
 800389e:	f04f 0000 	mov.w	r0, #0
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	0159      	lsls	r1, r3, #5
 80038a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ac:	0150      	lsls	r0, r2, #5
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	ebb2 080a 	subs.w	r8, r2, sl
 80038b6:	eb63 090b 	sbc.w	r9, r3, fp
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ce:	ebb2 0408 	subs.w	r4, r2, r8
 80038d2:	eb63 0509 	sbc.w	r5, r3, r9
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	00eb      	lsls	r3, r5, #3
 80038e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038e4:	00e2      	lsls	r2, r4, #3
 80038e6:	4614      	mov	r4, r2
 80038e8:	461d      	mov	r5, r3
 80038ea:	eb14 030a 	adds.w	r3, r4, sl
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	eb45 030b 	adc.w	r3, r5, fp
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003902:	4629      	mov	r1, r5
 8003904:	028b      	lsls	r3, r1, #10
 8003906:	4621      	mov	r1, r4
 8003908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800390c:	4621      	mov	r1, r4
 800390e:	028a      	lsls	r2, r1, #10
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003916:	2200      	movs	r2, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	60fa      	str	r2, [r7, #12]
 800391c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003920:	f7fc fca6 	bl	8000270 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4613      	mov	r3, r2
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	3301      	adds	r3, #1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800393c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003946:	e002      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetSysClockFreq+0x184>)
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800394c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003950:	4618      	mov	r0, r3
 8003952:	3740      	adds	r7, #64	; 0x40
 8003954:	46bd      	mov	sp, r7
 8003956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	00f42400 	.word	0x00f42400
 8003964:	017d7840 	.word	0x017d7840

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCC_GetHCLKFreq+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000000 	.word	0x20000000

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003984:	f7ff fff0 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0a9b      	lsrs	r3, r3, #10
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4903      	ldr	r1, [pc, #12]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40023800 	.word	0x40023800
 80039a4:	08004990 	.word	0x08004990

080039a8 <__errno>:
 80039a8:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <__errno+0x8>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	4d0d      	ldr	r5, [pc, #52]	; (80039ec <__libc_init_array+0x38>)
 80039b8:	4c0d      	ldr	r4, [pc, #52]	; (80039f0 <__libc_init_array+0x3c>)
 80039ba:	1b64      	subs	r4, r4, r5
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	2600      	movs	r6, #0
 80039c0:	42a6      	cmp	r6, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	4d0b      	ldr	r5, [pc, #44]	; (80039f4 <__libc_init_array+0x40>)
 80039c6:	4c0c      	ldr	r4, [pc, #48]	; (80039f8 <__libc_init_array+0x44>)
 80039c8:	f000 ffae 	bl	8004928 <_init>
 80039cc:	1b64      	subs	r4, r4, r5
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	2600      	movs	r6, #0
 80039d2:	42a6      	cmp	r6, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039dc:	4798      	blx	r3
 80039de:	3601      	adds	r6, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e6:	4798      	blx	r3
 80039e8:	3601      	adds	r6, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	08004a38 	.word	0x08004a38
 80039f0:	08004a38 	.word	0x08004a38
 80039f4:	08004a38 	.word	0x08004a38
 80039f8:	08004a3c 	.word	0x08004a3c

080039fc <memset>:
 80039fc:	4402      	add	r2, r0
 80039fe:	4603      	mov	r3, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <iprintf>:
 8003a0c:	b40f      	push	{r0, r1, r2, r3}
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <iprintf+0x2c>)
 8003a10:	b513      	push	{r0, r1, r4, lr}
 8003a12:	681c      	ldr	r4, [r3, #0]
 8003a14:	b124      	cbz	r4, 8003a20 <iprintf+0x14>
 8003a16:	69a3      	ldr	r3, [r4, #24]
 8003a18:	b913      	cbnz	r3, 8003a20 <iprintf+0x14>
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 f866 	bl	8003aec <__sinit>
 8003a20:	ab05      	add	r3, sp, #20
 8003a22:	9a04      	ldr	r2, [sp, #16]
 8003a24:	68a1      	ldr	r1, [r4, #8]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 f9bd 	bl	8003da8 <_vfiprintf_r>
 8003a2e:	b002      	add	sp, #8
 8003a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a34:	b004      	add	sp, #16
 8003a36:	4770      	bx	lr
 8003a38:	2000000c 	.word	0x2000000c

08003a3c <std>:
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	b510      	push	{r4, lr}
 8003a40:	4604      	mov	r4, r0
 8003a42:	e9c0 3300 	strd	r3, r3, [r0]
 8003a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a4a:	6083      	str	r3, [r0, #8]
 8003a4c:	8181      	strh	r1, [r0, #12]
 8003a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a50:	81c2      	strh	r2, [r0, #14]
 8003a52:	6183      	str	r3, [r0, #24]
 8003a54:	4619      	mov	r1, r3
 8003a56:	2208      	movs	r2, #8
 8003a58:	305c      	adds	r0, #92	; 0x5c
 8003a5a:	f7ff ffcf 	bl	80039fc <memset>
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <std+0x38>)
 8003a60:	6263      	str	r3, [r4, #36]	; 0x24
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <std+0x3c>)
 8003a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <std+0x40>)
 8003a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <std+0x44>)
 8003a6c:	6224      	str	r4, [r4, #32]
 8003a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003a70:	bd10      	pop	{r4, pc}
 8003a72:	bf00      	nop
 8003a74:	08004351 	.word	0x08004351
 8003a78:	08004373 	.word	0x08004373
 8003a7c:	080043ab 	.word	0x080043ab
 8003a80:	080043cf 	.word	0x080043cf

08003a84 <_cleanup_r>:
 8003a84:	4901      	ldr	r1, [pc, #4]	; (8003a8c <_cleanup_r+0x8>)
 8003a86:	f000 b8af 	b.w	8003be8 <_fwalk_reent>
 8003a8a:	bf00      	nop
 8003a8c:	080046a9 	.word	0x080046a9

08003a90 <__sfmoreglue>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	2268      	movs	r2, #104	; 0x68
 8003a94:	1e4d      	subs	r5, r1, #1
 8003a96:	4355      	muls	r5, r2
 8003a98:	460e      	mov	r6, r1
 8003a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a9e:	f000 f8e5 	bl	8003c6c <_malloc_r>
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	b140      	cbz	r0, 8003ab8 <__sfmoreglue+0x28>
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8003aac:	300c      	adds	r0, #12
 8003aae:	60a0      	str	r0, [r4, #8]
 8003ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ab4:	f7ff ffa2 	bl	80039fc <memset>
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd70      	pop	{r4, r5, r6, pc}

08003abc <__sfp_lock_acquire>:
 8003abc:	4801      	ldr	r0, [pc, #4]	; (8003ac4 <__sfp_lock_acquire+0x8>)
 8003abe:	f000 b8b3 	b.w	8003c28 <__retarget_lock_acquire_recursive>
 8003ac2:	bf00      	nop
 8003ac4:	200000f9 	.word	0x200000f9

08003ac8 <__sfp_lock_release>:
 8003ac8:	4801      	ldr	r0, [pc, #4]	; (8003ad0 <__sfp_lock_release+0x8>)
 8003aca:	f000 b8ae 	b.w	8003c2a <__retarget_lock_release_recursive>
 8003ace:	bf00      	nop
 8003ad0:	200000f9 	.word	0x200000f9

08003ad4 <__sinit_lock_acquire>:
 8003ad4:	4801      	ldr	r0, [pc, #4]	; (8003adc <__sinit_lock_acquire+0x8>)
 8003ad6:	f000 b8a7 	b.w	8003c28 <__retarget_lock_acquire_recursive>
 8003ada:	bf00      	nop
 8003adc:	200000fa 	.word	0x200000fa

08003ae0 <__sinit_lock_release>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <__sinit_lock_release+0x8>)
 8003ae2:	f000 b8a2 	b.w	8003c2a <__retarget_lock_release_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	200000fa 	.word	0x200000fa

08003aec <__sinit>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4604      	mov	r4, r0
 8003af0:	f7ff fff0 	bl	8003ad4 <__sinit_lock_acquire>
 8003af4:	69a3      	ldr	r3, [r4, #24]
 8003af6:	b11b      	cbz	r3, 8003b00 <__sinit+0x14>
 8003af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003afc:	f7ff bff0 	b.w	8003ae0 <__sinit_lock_release>
 8003b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b04:	6523      	str	r3, [r4, #80]	; 0x50
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <__sinit+0x68>)
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <__sinit+0x6c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b0e:	42a3      	cmp	r3, r4
 8003b10:	bf04      	itt	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	61a3      	streq	r3, [r4, #24]
 8003b16:	4620      	mov	r0, r4
 8003b18:	f000 f820 	bl	8003b5c <__sfp>
 8003b1c:	6060      	str	r0, [r4, #4]
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 f81c 	bl	8003b5c <__sfp>
 8003b24:	60a0      	str	r0, [r4, #8]
 8003b26:	4620      	mov	r0, r4
 8003b28:	f000 f818 	bl	8003b5c <__sfp>
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60e0      	str	r0, [r4, #12]
 8003b30:	2104      	movs	r1, #4
 8003b32:	6860      	ldr	r0, [r4, #4]
 8003b34:	f7ff ff82 	bl	8003a3c <std>
 8003b38:	68a0      	ldr	r0, [r4, #8]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2109      	movs	r1, #9
 8003b3e:	f7ff ff7d 	bl	8003a3c <std>
 8003b42:	68e0      	ldr	r0, [r4, #12]
 8003b44:	2202      	movs	r2, #2
 8003b46:	2112      	movs	r1, #18
 8003b48:	f7ff ff78 	bl	8003a3c <std>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	61a3      	str	r3, [r4, #24]
 8003b50:	e7d2      	b.n	8003af8 <__sinit+0xc>
 8003b52:	bf00      	nop
 8003b54:	08004998 	.word	0x08004998
 8003b58:	08003a85 	.word	0x08003a85

08003b5c <__sfp>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	4607      	mov	r7, r0
 8003b60:	f7ff ffac 	bl	8003abc <__sfp_lock_acquire>
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <__sfp+0x84>)
 8003b66:	681e      	ldr	r6, [r3, #0]
 8003b68:	69b3      	ldr	r3, [r6, #24]
 8003b6a:	b913      	cbnz	r3, 8003b72 <__sfp+0x16>
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f7ff ffbd 	bl	8003aec <__sinit>
 8003b72:	3648      	adds	r6, #72	; 0x48
 8003b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	d503      	bpl.n	8003b84 <__sfp+0x28>
 8003b7c:	6833      	ldr	r3, [r6, #0]
 8003b7e:	b30b      	cbz	r3, 8003bc4 <__sfp+0x68>
 8003b80:	6836      	ldr	r6, [r6, #0]
 8003b82:	e7f7      	b.n	8003b74 <__sfp+0x18>
 8003b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b88:	b9d5      	cbnz	r5, 8003bc0 <__sfp+0x64>
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <__sfp+0x88>)
 8003b8c:	60e3      	str	r3, [r4, #12]
 8003b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b92:	6665      	str	r5, [r4, #100]	; 0x64
 8003b94:	f000 f847 	bl	8003c26 <__retarget_lock_init_recursive>
 8003b98:	f7ff ff96 	bl	8003ac8 <__sfp_lock_release>
 8003b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ba4:	6025      	str	r5, [r4, #0]
 8003ba6:	61a5      	str	r5, [r4, #24]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	4629      	mov	r1, r5
 8003bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bb0:	f7ff ff24 	bl	80039fc <memset>
 8003bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc0:	3468      	adds	r4, #104	; 0x68
 8003bc2:	e7d9      	b.n	8003b78 <__sfp+0x1c>
 8003bc4:	2104      	movs	r1, #4
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	f7ff ff62 	bl	8003a90 <__sfmoreglue>
 8003bcc:	4604      	mov	r4, r0
 8003bce:	6030      	str	r0, [r6, #0]
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d1d5      	bne.n	8003b80 <__sfp+0x24>
 8003bd4:	f7ff ff78 	bl	8003ac8 <__sfp_lock_release>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	e7ee      	b.n	8003bbc <__sfp+0x60>
 8003bde:	bf00      	nop
 8003be0:	08004998 	.word	0x08004998
 8003be4:	ffff0001 	.word	0xffff0001

08003be8 <_fwalk_reent>:
 8003be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bec:	4606      	mov	r6, r0
 8003bee:	4688      	mov	r8, r1
 8003bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bf4:	2700      	movs	r7, #0
 8003bf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8003bfe:	d505      	bpl.n	8003c0c <_fwalk_reent+0x24>
 8003c00:	6824      	ldr	r4, [r4, #0]
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	d1f7      	bne.n	8003bf6 <_fwalk_reent+0xe>
 8003c06:	4638      	mov	r0, r7
 8003c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c0c:	89ab      	ldrh	r3, [r5, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d907      	bls.n	8003c22 <_fwalk_reent+0x3a>
 8003c12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c16:	3301      	adds	r3, #1
 8003c18:	d003      	beq.n	8003c22 <_fwalk_reent+0x3a>
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	47c0      	blx	r8
 8003c20:	4307      	orrs	r7, r0
 8003c22:	3568      	adds	r5, #104	; 0x68
 8003c24:	e7e9      	b.n	8003bfa <_fwalk_reent+0x12>

08003c26 <__retarget_lock_init_recursive>:
 8003c26:	4770      	bx	lr

08003c28 <__retarget_lock_acquire_recursive>:
 8003c28:	4770      	bx	lr

08003c2a <__retarget_lock_release_recursive>:
 8003c2a:	4770      	bx	lr

08003c2c <sbrk_aligned>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4e0e      	ldr	r6, [pc, #56]	; (8003c68 <sbrk_aligned+0x3c>)
 8003c30:	460c      	mov	r4, r1
 8003c32:	6831      	ldr	r1, [r6, #0]
 8003c34:	4605      	mov	r5, r0
 8003c36:	b911      	cbnz	r1, 8003c3e <sbrk_aligned+0x12>
 8003c38:	f000 fb7a 	bl	8004330 <_sbrk_r>
 8003c3c:	6030      	str	r0, [r6, #0]
 8003c3e:	4621      	mov	r1, r4
 8003c40:	4628      	mov	r0, r5
 8003c42:	f000 fb75 	bl	8004330 <_sbrk_r>
 8003c46:	1c43      	adds	r3, r0, #1
 8003c48:	d00a      	beq.n	8003c60 <sbrk_aligned+0x34>
 8003c4a:	1cc4      	adds	r4, r0, #3
 8003c4c:	f024 0403 	bic.w	r4, r4, #3
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d007      	beq.n	8003c64 <sbrk_aligned+0x38>
 8003c54:	1a21      	subs	r1, r4, r0
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 fb6a 	bl	8004330 <_sbrk_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d101      	bne.n	8003c64 <sbrk_aligned+0x38>
 8003c60:	f04f 34ff 	mov.w	r4, #4294967295
 8003c64:	4620      	mov	r0, r4
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	20000100 	.word	0x20000100

08003c6c <_malloc_r>:
 8003c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c70:	1ccd      	adds	r5, r1, #3
 8003c72:	f025 0503 	bic.w	r5, r5, #3
 8003c76:	3508      	adds	r5, #8
 8003c78:	2d0c      	cmp	r5, #12
 8003c7a:	bf38      	it	cc
 8003c7c:	250c      	movcc	r5, #12
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	4607      	mov	r7, r0
 8003c82:	db01      	blt.n	8003c88 <_malloc_r+0x1c>
 8003c84:	42a9      	cmp	r1, r5
 8003c86:	d905      	bls.n	8003c94 <_malloc_r+0x28>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	4630      	mov	r0, r6
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	4e2e      	ldr	r6, [pc, #184]	; (8003d50 <_malloc_r+0xe4>)
 8003c96:	f000 fdbb 	bl	8004810 <__malloc_lock>
 8003c9a:	6833      	ldr	r3, [r6, #0]
 8003c9c:	461c      	mov	r4, r3
 8003c9e:	bb34      	cbnz	r4, 8003cee <_malloc_r+0x82>
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f7ff ffc2 	bl	8003c2c <sbrk_aligned>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	4604      	mov	r4, r0
 8003cac:	d14d      	bne.n	8003d4a <_malloc_r+0xde>
 8003cae:	6834      	ldr	r4, [r6, #0]
 8003cb0:	4626      	mov	r6, r4
 8003cb2:	2e00      	cmp	r6, #0
 8003cb4:	d140      	bne.n	8003d38 <_malloc_r+0xcc>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4638      	mov	r0, r7
 8003cbc:	eb04 0803 	add.w	r8, r4, r3
 8003cc0:	f000 fb36 	bl	8004330 <_sbrk_r>
 8003cc4:	4580      	cmp	r8, r0
 8003cc6:	d13a      	bne.n	8003d3e <_malloc_r+0xd2>
 8003cc8:	6821      	ldr	r1, [r4, #0]
 8003cca:	3503      	adds	r5, #3
 8003ccc:	1a6d      	subs	r5, r5, r1
 8003cce:	f025 0503 	bic.w	r5, r5, #3
 8003cd2:	3508      	adds	r5, #8
 8003cd4:	2d0c      	cmp	r5, #12
 8003cd6:	bf38      	it	cc
 8003cd8:	250c      	movcc	r5, #12
 8003cda:	4629      	mov	r1, r5
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7ff ffa5 	bl	8003c2c <sbrk_aligned>
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d02b      	beq.n	8003d3e <_malloc_r+0xd2>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	442b      	add	r3, r5
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	e00e      	b.n	8003d0c <_malloc_r+0xa0>
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	1b52      	subs	r2, r2, r5
 8003cf2:	d41e      	bmi.n	8003d32 <_malloc_r+0xc6>
 8003cf4:	2a0b      	cmp	r2, #11
 8003cf6:	d916      	bls.n	8003d26 <_malloc_r+0xba>
 8003cf8:	1961      	adds	r1, r4, r5
 8003cfa:	42a3      	cmp	r3, r4
 8003cfc:	6025      	str	r5, [r4, #0]
 8003cfe:	bf18      	it	ne
 8003d00:	6059      	strne	r1, [r3, #4]
 8003d02:	6863      	ldr	r3, [r4, #4]
 8003d04:	bf08      	it	eq
 8003d06:	6031      	streq	r1, [r6, #0]
 8003d08:	5162      	str	r2, [r4, r5]
 8003d0a:	604b      	str	r3, [r1, #4]
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f104 060b 	add.w	r6, r4, #11
 8003d12:	f000 fd83 	bl	800481c <__malloc_unlock>
 8003d16:	f026 0607 	bic.w	r6, r6, #7
 8003d1a:	1d23      	adds	r3, r4, #4
 8003d1c:	1af2      	subs	r2, r6, r3
 8003d1e:	d0b6      	beq.n	8003c8e <_malloc_r+0x22>
 8003d20:	1b9b      	subs	r3, r3, r6
 8003d22:	50a3      	str	r3, [r4, r2]
 8003d24:	e7b3      	b.n	8003c8e <_malloc_r+0x22>
 8003d26:	6862      	ldr	r2, [r4, #4]
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	bf0c      	ite	eq
 8003d2c:	6032      	streq	r2, [r6, #0]
 8003d2e:	605a      	strne	r2, [r3, #4]
 8003d30:	e7ec      	b.n	8003d0c <_malloc_r+0xa0>
 8003d32:	4623      	mov	r3, r4
 8003d34:	6864      	ldr	r4, [r4, #4]
 8003d36:	e7b2      	b.n	8003c9e <_malloc_r+0x32>
 8003d38:	4634      	mov	r4, r6
 8003d3a:	6876      	ldr	r6, [r6, #4]
 8003d3c:	e7b9      	b.n	8003cb2 <_malloc_r+0x46>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4638      	mov	r0, r7
 8003d44:	f000 fd6a 	bl	800481c <__malloc_unlock>
 8003d48:	e7a1      	b.n	8003c8e <_malloc_r+0x22>
 8003d4a:	6025      	str	r5, [r4, #0]
 8003d4c:	e7de      	b.n	8003d0c <_malloc_r+0xa0>
 8003d4e:	bf00      	nop
 8003d50:	200000fc 	.word	0x200000fc

08003d54 <__sfputc_r>:
 8003d54:	6893      	ldr	r3, [r2, #8]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	b410      	push	{r4}
 8003d5c:	6093      	str	r3, [r2, #8]
 8003d5e:	da08      	bge.n	8003d72 <__sfputc_r+0x1e>
 8003d60:	6994      	ldr	r4, [r2, #24]
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	db01      	blt.n	8003d6a <__sfputc_r+0x16>
 8003d66:	290a      	cmp	r1, #10
 8003d68:	d103      	bne.n	8003d72 <__sfputc_r+0x1e>
 8003d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d6e:	f000 bb33 	b.w	80043d8 <__swbuf_r>
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	1c58      	adds	r0, r3, #1
 8003d76:	6010      	str	r0, [r2, #0]
 8003d78:	7019      	strb	r1, [r3, #0]
 8003d7a:	4608      	mov	r0, r1
 8003d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <__sfputs_r>:
 8003d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	18d5      	adds	r5, r2, r3
 8003d8c:	42ac      	cmp	r4, r5
 8003d8e:	d101      	bne.n	8003d94 <__sfputs_r+0x12>
 8003d90:	2000      	movs	r0, #0
 8003d92:	e007      	b.n	8003da4 <__sfputs_r+0x22>
 8003d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d98:	463a      	mov	r2, r7
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f7ff ffda 	bl	8003d54 <__sfputc_r>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d1f3      	bne.n	8003d8c <__sfputs_r+0xa>
 8003da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003da8 <_vfiprintf_r>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	460d      	mov	r5, r1
 8003dae:	b09d      	sub	sp, #116	; 0x74
 8003db0:	4614      	mov	r4, r2
 8003db2:	4698      	mov	r8, r3
 8003db4:	4606      	mov	r6, r0
 8003db6:	b118      	cbz	r0, 8003dc0 <_vfiprintf_r+0x18>
 8003db8:	6983      	ldr	r3, [r0, #24]
 8003dba:	b90b      	cbnz	r3, 8003dc0 <_vfiprintf_r+0x18>
 8003dbc:	f7ff fe96 	bl	8003aec <__sinit>
 8003dc0:	4b89      	ldr	r3, [pc, #548]	; (8003fe8 <_vfiprintf_r+0x240>)
 8003dc2:	429d      	cmp	r5, r3
 8003dc4:	d11b      	bne.n	8003dfe <_vfiprintf_r+0x56>
 8003dc6:	6875      	ldr	r5, [r6, #4]
 8003dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dca:	07d9      	lsls	r1, r3, #31
 8003dcc:	d405      	bmi.n	8003dda <_vfiprintf_r+0x32>
 8003dce:	89ab      	ldrh	r3, [r5, #12]
 8003dd0:	059a      	lsls	r2, r3, #22
 8003dd2:	d402      	bmi.n	8003dda <_vfiprintf_r+0x32>
 8003dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dd6:	f7ff ff27 	bl	8003c28 <__retarget_lock_acquire_recursive>
 8003dda:	89ab      	ldrh	r3, [r5, #12]
 8003ddc:	071b      	lsls	r3, r3, #28
 8003dde:	d501      	bpl.n	8003de4 <_vfiprintf_r+0x3c>
 8003de0:	692b      	ldr	r3, [r5, #16]
 8003de2:	b9eb      	cbnz	r3, 8003e20 <_vfiprintf_r+0x78>
 8003de4:	4629      	mov	r1, r5
 8003de6:	4630      	mov	r0, r6
 8003de8:	f000 fb5a 	bl	80044a0 <__swsetup_r>
 8003dec:	b1c0      	cbz	r0, 8003e20 <_vfiprintf_r+0x78>
 8003dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003df0:	07dc      	lsls	r4, r3, #31
 8003df2:	d50e      	bpl.n	8003e12 <_vfiprintf_r+0x6a>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	b01d      	add	sp, #116	; 0x74
 8003dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfe:	4b7b      	ldr	r3, [pc, #492]	; (8003fec <_vfiprintf_r+0x244>)
 8003e00:	429d      	cmp	r5, r3
 8003e02:	d101      	bne.n	8003e08 <_vfiprintf_r+0x60>
 8003e04:	68b5      	ldr	r5, [r6, #8]
 8003e06:	e7df      	b.n	8003dc8 <_vfiprintf_r+0x20>
 8003e08:	4b79      	ldr	r3, [pc, #484]	; (8003ff0 <_vfiprintf_r+0x248>)
 8003e0a:	429d      	cmp	r5, r3
 8003e0c:	bf08      	it	eq
 8003e0e:	68f5      	ldreq	r5, [r6, #12]
 8003e10:	e7da      	b.n	8003dc8 <_vfiprintf_r+0x20>
 8003e12:	89ab      	ldrh	r3, [r5, #12]
 8003e14:	0598      	lsls	r0, r3, #22
 8003e16:	d4ed      	bmi.n	8003df4 <_vfiprintf_r+0x4c>
 8003e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e1a:	f7ff ff06 	bl	8003c2a <__retarget_lock_release_recursive>
 8003e1e:	e7e9      	b.n	8003df4 <_vfiprintf_r+0x4c>
 8003e20:	2300      	movs	r3, #0
 8003e22:	9309      	str	r3, [sp, #36]	; 0x24
 8003e24:	2320      	movs	r3, #32
 8003e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e2e:	2330      	movs	r3, #48	; 0x30
 8003e30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ff4 <_vfiprintf_r+0x24c>
 8003e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e38:	f04f 0901 	mov.w	r9, #1
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	469a      	mov	sl, r3
 8003e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e44:	b10a      	cbz	r2, 8003e4a <_vfiprintf_r+0xa2>
 8003e46:	2a25      	cmp	r2, #37	; 0x25
 8003e48:	d1f9      	bne.n	8003e3e <_vfiprintf_r+0x96>
 8003e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e4e:	d00b      	beq.n	8003e68 <_vfiprintf_r+0xc0>
 8003e50:	465b      	mov	r3, fp
 8003e52:	4622      	mov	r2, r4
 8003e54:	4629      	mov	r1, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7ff ff93 	bl	8003d82 <__sfputs_r>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	f000 80aa 	beq.w	8003fb6 <_vfiprintf_r+0x20e>
 8003e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e64:	445a      	add	r2, fp
 8003e66:	9209      	str	r2, [sp, #36]	; 0x24
 8003e68:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a2 	beq.w	8003fb6 <_vfiprintf_r+0x20e>
 8003e72:	2300      	movs	r3, #0
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295
 8003e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e7c:	f10a 0a01 	add.w	sl, sl, #1
 8003e80:	9304      	str	r3, [sp, #16]
 8003e82:	9307      	str	r3, [sp, #28]
 8003e84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e88:	931a      	str	r3, [sp, #104]	; 0x68
 8003e8a:	4654      	mov	r4, sl
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e92:	4858      	ldr	r0, [pc, #352]	; (8003ff4 <_vfiprintf_r+0x24c>)
 8003e94:	f7fc f99c 	bl	80001d0 <memchr>
 8003e98:	9a04      	ldr	r2, [sp, #16]
 8003e9a:	b9d8      	cbnz	r0, 8003ed4 <_vfiprintf_r+0x12c>
 8003e9c:	06d1      	lsls	r1, r2, #27
 8003e9e:	bf44      	itt	mi
 8003ea0:	2320      	movmi	r3, #32
 8003ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea6:	0713      	lsls	r3, r2, #28
 8003ea8:	bf44      	itt	mi
 8003eaa:	232b      	movmi	r3, #43	; 0x2b
 8003eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb6:	d015      	beq.n	8003ee4 <_vfiprintf_r+0x13c>
 8003eb8:	9a07      	ldr	r2, [sp, #28]
 8003eba:	4654      	mov	r4, sl
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f04f 0c0a 	mov.w	ip, #10
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ec8:	3b30      	subs	r3, #48	; 0x30
 8003eca:	2b09      	cmp	r3, #9
 8003ecc:	d94e      	bls.n	8003f6c <_vfiprintf_r+0x1c4>
 8003ece:	b1b0      	cbz	r0, 8003efe <_vfiprintf_r+0x156>
 8003ed0:	9207      	str	r2, [sp, #28]
 8003ed2:	e014      	b.n	8003efe <_vfiprintf_r+0x156>
 8003ed4:	eba0 0308 	sub.w	r3, r0, r8
 8003ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8003edc:	4313      	orrs	r3, r2
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	e7d2      	b.n	8003e8a <_vfiprintf_r+0xe2>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	1d19      	adds	r1, r3, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	9103      	str	r1, [sp, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bfbb      	ittet	lt
 8003ef0:	425b      	neglt	r3, r3
 8003ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef6:	9307      	strge	r3, [sp, #28]
 8003ef8:	9307      	strlt	r3, [sp, #28]
 8003efa:	bfb8      	it	lt
 8003efc:	9204      	strlt	r2, [sp, #16]
 8003efe:	7823      	ldrb	r3, [r4, #0]
 8003f00:	2b2e      	cmp	r3, #46	; 0x2e
 8003f02:	d10c      	bne.n	8003f1e <_vfiprintf_r+0x176>
 8003f04:	7863      	ldrb	r3, [r4, #1]
 8003f06:	2b2a      	cmp	r3, #42	; 0x2a
 8003f08:	d135      	bne.n	8003f76 <_vfiprintf_r+0x1ce>
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	1d1a      	adds	r2, r3, #4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	9203      	str	r2, [sp, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bfb8      	it	lt
 8003f16:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f1a:	3402      	adds	r4, #2
 8003f1c:	9305      	str	r3, [sp, #20]
 8003f1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004004 <_vfiprintf_r+0x25c>
 8003f22:	7821      	ldrb	r1, [r4, #0]
 8003f24:	2203      	movs	r2, #3
 8003f26:	4650      	mov	r0, sl
 8003f28:	f7fc f952 	bl	80001d0 <memchr>
 8003f2c:	b140      	cbz	r0, 8003f40 <_vfiprintf_r+0x198>
 8003f2e:	2340      	movs	r3, #64	; 0x40
 8003f30:	eba0 000a 	sub.w	r0, r0, sl
 8003f34:	fa03 f000 	lsl.w	r0, r3, r0
 8003f38:	9b04      	ldr	r3, [sp, #16]
 8003f3a:	4303      	orrs	r3, r0
 8003f3c:	3401      	adds	r4, #1
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f44:	482c      	ldr	r0, [pc, #176]	; (8003ff8 <_vfiprintf_r+0x250>)
 8003f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4a:	2206      	movs	r2, #6
 8003f4c:	f7fc f940 	bl	80001d0 <memchr>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d03f      	beq.n	8003fd4 <_vfiprintf_r+0x22c>
 8003f54:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <_vfiprintf_r+0x254>)
 8003f56:	bb1b      	cbnz	r3, 8003fa0 <_vfiprintf_r+0x1f8>
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	3307      	adds	r3, #7
 8003f5c:	f023 0307 	bic.w	r3, r3, #7
 8003f60:	3308      	adds	r3, #8
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f66:	443b      	add	r3, r7
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	e767      	b.n	8003e3c <_vfiprintf_r+0x94>
 8003f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f70:	460c      	mov	r4, r1
 8003f72:	2001      	movs	r0, #1
 8003f74:	e7a5      	b.n	8003ec2 <_vfiprintf_r+0x11a>
 8003f76:	2300      	movs	r3, #0
 8003f78:	3401      	adds	r4, #1
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f04f 0c0a 	mov.w	ip, #10
 8003f82:	4620      	mov	r0, r4
 8003f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f88:	3a30      	subs	r2, #48	; 0x30
 8003f8a:	2a09      	cmp	r2, #9
 8003f8c:	d903      	bls.n	8003f96 <_vfiprintf_r+0x1ee>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0c5      	beq.n	8003f1e <_vfiprintf_r+0x176>
 8003f92:	9105      	str	r1, [sp, #20]
 8003f94:	e7c3      	b.n	8003f1e <_vfiprintf_r+0x176>
 8003f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e7f0      	b.n	8003f82 <_vfiprintf_r+0x1da>
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	462a      	mov	r2, r5
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <_vfiprintf_r+0x258>)
 8003fa8:	a904      	add	r1, sp, #16
 8003faa:	4630      	mov	r0, r6
 8003fac:	f3af 8000 	nop.w
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	1c78      	adds	r0, r7, #1
 8003fb4:	d1d6      	bne.n	8003f64 <_vfiprintf_r+0x1bc>
 8003fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb8:	07d9      	lsls	r1, r3, #31
 8003fba:	d405      	bmi.n	8003fc8 <_vfiprintf_r+0x220>
 8003fbc:	89ab      	ldrh	r3, [r5, #12]
 8003fbe:	059a      	lsls	r2, r3, #22
 8003fc0:	d402      	bmi.n	8003fc8 <_vfiprintf_r+0x220>
 8003fc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fc4:	f7ff fe31 	bl	8003c2a <__retarget_lock_release_recursive>
 8003fc8:	89ab      	ldrh	r3, [r5, #12]
 8003fca:	065b      	lsls	r3, r3, #25
 8003fcc:	f53f af12 	bmi.w	8003df4 <_vfiprintf_r+0x4c>
 8003fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fd2:	e711      	b.n	8003df8 <_vfiprintf_r+0x50>
 8003fd4:	ab03      	add	r3, sp, #12
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	462a      	mov	r2, r5
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <_vfiprintf_r+0x258>)
 8003fdc:	a904      	add	r1, sp, #16
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f000 f880 	bl	80040e4 <_printf_i>
 8003fe4:	e7e4      	b.n	8003fb0 <_vfiprintf_r+0x208>
 8003fe6:	bf00      	nop
 8003fe8:	080049bc 	.word	0x080049bc
 8003fec:	080049dc 	.word	0x080049dc
 8003ff0:	0800499c 	.word	0x0800499c
 8003ff4:	080049fc 	.word	0x080049fc
 8003ff8:	08004a06 	.word	0x08004a06
 8003ffc:	00000000 	.word	0x00000000
 8004000:	08003d83 	.word	0x08003d83
 8004004:	08004a02 	.word	0x08004a02

08004008 <_printf_common>:
 8004008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800400c:	4616      	mov	r6, r2
 800400e:	4699      	mov	r9, r3
 8004010:	688a      	ldr	r2, [r1, #8]
 8004012:	690b      	ldr	r3, [r1, #16]
 8004014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004018:	4293      	cmp	r3, r2
 800401a:	bfb8      	it	lt
 800401c:	4613      	movlt	r3, r2
 800401e:	6033      	str	r3, [r6, #0]
 8004020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004024:	4607      	mov	r7, r0
 8004026:	460c      	mov	r4, r1
 8004028:	b10a      	cbz	r2, 800402e <_printf_common+0x26>
 800402a:	3301      	adds	r3, #1
 800402c:	6033      	str	r3, [r6, #0]
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	0699      	lsls	r1, r3, #26
 8004032:	bf42      	ittt	mi
 8004034:	6833      	ldrmi	r3, [r6, #0]
 8004036:	3302      	addmi	r3, #2
 8004038:	6033      	strmi	r3, [r6, #0]
 800403a:	6825      	ldr	r5, [r4, #0]
 800403c:	f015 0506 	ands.w	r5, r5, #6
 8004040:	d106      	bne.n	8004050 <_printf_common+0x48>
 8004042:	f104 0a19 	add.w	sl, r4, #25
 8004046:	68e3      	ldr	r3, [r4, #12]
 8004048:	6832      	ldr	r2, [r6, #0]
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	42ab      	cmp	r3, r5
 800404e:	dc26      	bgt.n	800409e <_printf_common+0x96>
 8004050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004054:	1e13      	subs	r3, r2, #0
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	bf18      	it	ne
 800405a:	2301      	movne	r3, #1
 800405c:	0692      	lsls	r2, r2, #26
 800405e:	d42b      	bmi.n	80040b8 <_printf_common+0xb0>
 8004060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004064:	4649      	mov	r1, r9
 8004066:	4638      	mov	r0, r7
 8004068:	47c0      	blx	r8
 800406a:	3001      	adds	r0, #1
 800406c:	d01e      	beq.n	80040ac <_printf_common+0xa4>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	68e5      	ldr	r5, [r4, #12]
 8004072:	6832      	ldr	r2, [r6, #0]
 8004074:	f003 0306 	and.w	r3, r3, #6
 8004078:	2b04      	cmp	r3, #4
 800407a:	bf08      	it	eq
 800407c:	1aad      	subeq	r5, r5, r2
 800407e:	68a3      	ldr	r3, [r4, #8]
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	bf0c      	ite	eq
 8004084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004088:	2500      	movne	r5, #0
 800408a:	4293      	cmp	r3, r2
 800408c:	bfc4      	itt	gt
 800408e:	1a9b      	subgt	r3, r3, r2
 8004090:	18ed      	addgt	r5, r5, r3
 8004092:	2600      	movs	r6, #0
 8004094:	341a      	adds	r4, #26
 8004096:	42b5      	cmp	r5, r6
 8004098:	d11a      	bne.n	80040d0 <_printf_common+0xc8>
 800409a:	2000      	movs	r0, #0
 800409c:	e008      	b.n	80040b0 <_printf_common+0xa8>
 800409e:	2301      	movs	r3, #1
 80040a0:	4652      	mov	r2, sl
 80040a2:	4649      	mov	r1, r9
 80040a4:	4638      	mov	r0, r7
 80040a6:	47c0      	blx	r8
 80040a8:	3001      	adds	r0, #1
 80040aa:	d103      	bne.n	80040b4 <_printf_common+0xac>
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	3501      	adds	r5, #1
 80040b6:	e7c6      	b.n	8004046 <_printf_common+0x3e>
 80040b8:	18e1      	adds	r1, r4, r3
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	2030      	movs	r0, #48	; 0x30
 80040be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c2:	4422      	add	r2, r4
 80040c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040cc:	3302      	adds	r3, #2
 80040ce:	e7c7      	b.n	8004060 <_printf_common+0x58>
 80040d0:	2301      	movs	r3, #1
 80040d2:	4622      	mov	r2, r4
 80040d4:	4649      	mov	r1, r9
 80040d6:	4638      	mov	r0, r7
 80040d8:	47c0      	blx	r8
 80040da:	3001      	adds	r0, #1
 80040dc:	d0e6      	beq.n	80040ac <_printf_common+0xa4>
 80040de:	3601      	adds	r6, #1
 80040e0:	e7d9      	b.n	8004096 <_printf_common+0x8e>
	...

080040e4 <_printf_i>:
 80040e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040e8:	7e0f      	ldrb	r7, [r1, #24]
 80040ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ec:	2f78      	cmp	r7, #120	; 0x78
 80040ee:	4691      	mov	r9, r2
 80040f0:	4680      	mov	r8, r0
 80040f2:	460c      	mov	r4, r1
 80040f4:	469a      	mov	sl, r3
 80040f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040fa:	d807      	bhi.n	800410c <_printf_i+0x28>
 80040fc:	2f62      	cmp	r7, #98	; 0x62
 80040fe:	d80a      	bhi.n	8004116 <_printf_i+0x32>
 8004100:	2f00      	cmp	r7, #0
 8004102:	f000 80d8 	beq.w	80042b6 <_printf_i+0x1d2>
 8004106:	2f58      	cmp	r7, #88	; 0x58
 8004108:	f000 80a3 	beq.w	8004252 <_printf_i+0x16e>
 800410c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004114:	e03a      	b.n	800418c <_printf_i+0xa8>
 8004116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800411a:	2b15      	cmp	r3, #21
 800411c:	d8f6      	bhi.n	800410c <_printf_i+0x28>
 800411e:	a101      	add	r1, pc, #4	; (adr r1, 8004124 <_printf_i+0x40>)
 8004120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004124:	0800417d 	.word	0x0800417d
 8004128:	08004191 	.word	0x08004191
 800412c:	0800410d 	.word	0x0800410d
 8004130:	0800410d 	.word	0x0800410d
 8004134:	0800410d 	.word	0x0800410d
 8004138:	0800410d 	.word	0x0800410d
 800413c:	08004191 	.word	0x08004191
 8004140:	0800410d 	.word	0x0800410d
 8004144:	0800410d 	.word	0x0800410d
 8004148:	0800410d 	.word	0x0800410d
 800414c:	0800410d 	.word	0x0800410d
 8004150:	0800429d 	.word	0x0800429d
 8004154:	080041c1 	.word	0x080041c1
 8004158:	0800427f 	.word	0x0800427f
 800415c:	0800410d 	.word	0x0800410d
 8004160:	0800410d 	.word	0x0800410d
 8004164:	080042bf 	.word	0x080042bf
 8004168:	0800410d 	.word	0x0800410d
 800416c:	080041c1 	.word	0x080041c1
 8004170:	0800410d 	.word	0x0800410d
 8004174:	0800410d 	.word	0x0800410d
 8004178:	08004287 	.word	0x08004287
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	1d1a      	adds	r2, r3, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800418c:	2301      	movs	r3, #1
 800418e:	e0a3      	b.n	80042d8 <_printf_i+0x1f4>
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	6829      	ldr	r1, [r5, #0]
 8004194:	0606      	lsls	r6, r0, #24
 8004196:	f101 0304 	add.w	r3, r1, #4
 800419a:	d50a      	bpl.n	80041b2 <_printf_i+0xce>
 800419c:	680e      	ldr	r6, [r1, #0]
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	2e00      	cmp	r6, #0
 80041a2:	da03      	bge.n	80041ac <_printf_i+0xc8>
 80041a4:	232d      	movs	r3, #45	; 0x2d
 80041a6:	4276      	negs	r6, r6
 80041a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ac:	485e      	ldr	r0, [pc, #376]	; (8004328 <_printf_i+0x244>)
 80041ae:	230a      	movs	r3, #10
 80041b0:	e019      	b.n	80041e6 <_printf_i+0x102>
 80041b2:	680e      	ldr	r6, [r1, #0]
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041ba:	bf18      	it	ne
 80041bc:	b236      	sxthne	r6, r6
 80041be:	e7ef      	b.n	80041a0 <_printf_i+0xbc>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	1d19      	adds	r1, r3, #4
 80041c6:	6029      	str	r1, [r5, #0]
 80041c8:	0601      	lsls	r1, r0, #24
 80041ca:	d501      	bpl.n	80041d0 <_printf_i+0xec>
 80041cc:	681e      	ldr	r6, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <_printf_i+0xf2>
 80041d0:	0646      	lsls	r6, r0, #25
 80041d2:	d5fb      	bpl.n	80041cc <_printf_i+0xe8>
 80041d4:	881e      	ldrh	r6, [r3, #0]
 80041d6:	4854      	ldr	r0, [pc, #336]	; (8004328 <_printf_i+0x244>)
 80041d8:	2f6f      	cmp	r7, #111	; 0x6f
 80041da:	bf0c      	ite	eq
 80041dc:	2308      	moveq	r3, #8
 80041de:	230a      	movne	r3, #10
 80041e0:	2100      	movs	r1, #0
 80041e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041e6:	6865      	ldr	r5, [r4, #4]
 80041e8:	60a5      	str	r5, [r4, #8]
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	bfa2      	ittt	ge
 80041ee:	6821      	ldrge	r1, [r4, #0]
 80041f0:	f021 0104 	bicge.w	r1, r1, #4
 80041f4:	6021      	strge	r1, [r4, #0]
 80041f6:	b90e      	cbnz	r6, 80041fc <_printf_i+0x118>
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	d04d      	beq.n	8004298 <_printf_i+0x1b4>
 80041fc:	4615      	mov	r5, r2
 80041fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004202:	fb03 6711 	mls	r7, r3, r1, r6
 8004206:	5dc7      	ldrb	r7, [r0, r7]
 8004208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800420c:	4637      	mov	r7, r6
 800420e:	42bb      	cmp	r3, r7
 8004210:	460e      	mov	r6, r1
 8004212:	d9f4      	bls.n	80041fe <_printf_i+0x11a>
 8004214:	2b08      	cmp	r3, #8
 8004216:	d10b      	bne.n	8004230 <_printf_i+0x14c>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	07de      	lsls	r6, r3, #31
 800421c:	d508      	bpl.n	8004230 <_printf_i+0x14c>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	6861      	ldr	r1, [r4, #4]
 8004222:	4299      	cmp	r1, r3
 8004224:	bfde      	ittt	le
 8004226:	2330      	movle	r3, #48	; 0x30
 8004228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800422c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004230:	1b52      	subs	r2, r2, r5
 8004232:	6122      	str	r2, [r4, #16]
 8004234:	f8cd a000 	str.w	sl, [sp]
 8004238:	464b      	mov	r3, r9
 800423a:	aa03      	add	r2, sp, #12
 800423c:	4621      	mov	r1, r4
 800423e:	4640      	mov	r0, r8
 8004240:	f7ff fee2 	bl	8004008 <_printf_common>
 8004244:	3001      	adds	r0, #1
 8004246:	d14c      	bne.n	80042e2 <_printf_i+0x1fe>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	b004      	add	sp, #16
 800424e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004252:	4835      	ldr	r0, [pc, #212]	; (8004328 <_printf_i+0x244>)
 8004254:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004258:	6829      	ldr	r1, [r5, #0]
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004260:	6029      	str	r1, [r5, #0]
 8004262:	061d      	lsls	r5, r3, #24
 8004264:	d514      	bpl.n	8004290 <_printf_i+0x1ac>
 8004266:	07df      	lsls	r7, r3, #31
 8004268:	bf44      	itt	mi
 800426a:	f043 0320 	orrmi.w	r3, r3, #32
 800426e:	6023      	strmi	r3, [r4, #0]
 8004270:	b91e      	cbnz	r6, 800427a <_printf_i+0x196>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	f023 0320 	bic.w	r3, r3, #32
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	2310      	movs	r3, #16
 800427c:	e7b0      	b.n	80041e0 <_printf_i+0xfc>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	f043 0320 	orr.w	r3, r3, #32
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	2378      	movs	r3, #120	; 0x78
 8004288:	4828      	ldr	r0, [pc, #160]	; (800432c <_printf_i+0x248>)
 800428a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800428e:	e7e3      	b.n	8004258 <_printf_i+0x174>
 8004290:	0659      	lsls	r1, r3, #25
 8004292:	bf48      	it	mi
 8004294:	b2b6      	uxthmi	r6, r6
 8004296:	e7e6      	b.n	8004266 <_printf_i+0x182>
 8004298:	4615      	mov	r5, r2
 800429a:	e7bb      	b.n	8004214 <_printf_i+0x130>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	6826      	ldr	r6, [r4, #0]
 80042a0:	6961      	ldr	r1, [r4, #20]
 80042a2:	1d18      	adds	r0, r3, #4
 80042a4:	6028      	str	r0, [r5, #0]
 80042a6:	0635      	lsls	r5, r6, #24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0x1cc>
 80042ac:	6019      	str	r1, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <_printf_i+0x1d2>
 80042b0:	0670      	lsls	r0, r6, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0x1c8>
 80042b4:	8019      	strh	r1, [r3, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	4615      	mov	r5, r2
 80042bc:	e7ba      	b.n	8004234 <_printf_i+0x150>
 80042be:	682b      	ldr	r3, [r5, #0]
 80042c0:	1d1a      	adds	r2, r3, #4
 80042c2:	602a      	str	r2, [r5, #0]
 80042c4:	681d      	ldr	r5, [r3, #0]
 80042c6:	6862      	ldr	r2, [r4, #4]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4628      	mov	r0, r5
 80042cc:	f7fb ff80 	bl	80001d0 <memchr>
 80042d0:	b108      	cbz	r0, 80042d6 <_printf_i+0x1f2>
 80042d2:	1b40      	subs	r0, r0, r5
 80042d4:	6060      	str	r0, [r4, #4]
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	2300      	movs	r3, #0
 80042dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e0:	e7a8      	b.n	8004234 <_printf_i+0x150>
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	462a      	mov	r2, r5
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d0ab      	beq.n	8004248 <_printf_i+0x164>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	079b      	lsls	r3, r3, #30
 80042f4:	d413      	bmi.n	800431e <_printf_i+0x23a>
 80042f6:	68e0      	ldr	r0, [r4, #12]
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	4298      	cmp	r0, r3
 80042fc:	bfb8      	it	lt
 80042fe:	4618      	movlt	r0, r3
 8004300:	e7a4      	b.n	800424c <_printf_i+0x168>
 8004302:	2301      	movs	r3, #1
 8004304:	4632      	mov	r2, r6
 8004306:	4649      	mov	r1, r9
 8004308:	4640      	mov	r0, r8
 800430a:	47d0      	blx	sl
 800430c:	3001      	adds	r0, #1
 800430e:	d09b      	beq.n	8004248 <_printf_i+0x164>
 8004310:	3501      	adds	r5, #1
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	9903      	ldr	r1, [sp, #12]
 8004316:	1a5b      	subs	r3, r3, r1
 8004318:	42ab      	cmp	r3, r5
 800431a:	dcf2      	bgt.n	8004302 <_printf_i+0x21e>
 800431c:	e7eb      	b.n	80042f6 <_printf_i+0x212>
 800431e:	2500      	movs	r5, #0
 8004320:	f104 0619 	add.w	r6, r4, #25
 8004324:	e7f5      	b.n	8004312 <_printf_i+0x22e>
 8004326:	bf00      	nop
 8004328:	08004a0d 	.word	0x08004a0d
 800432c:	08004a1e 	.word	0x08004a1e

08004330 <_sbrk_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4d06      	ldr	r5, [pc, #24]	; (800434c <_sbrk_r+0x1c>)
 8004334:	2300      	movs	r3, #0
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	f7fc fc1c 	bl	8000b78 <_sbrk>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d102      	bne.n	800434a <_sbrk_r+0x1a>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b103      	cbz	r3, 800434a <_sbrk_r+0x1a>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	20000104 	.word	0x20000104

08004350 <__sread>:
 8004350:	b510      	push	{r4, lr}
 8004352:	460c      	mov	r4, r1
 8004354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004358:	f000 fab2 	bl	80048c0 <_read_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	bfab      	itete	ge
 8004360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004362:	89a3      	ldrhlt	r3, [r4, #12]
 8004364:	181b      	addge	r3, r3, r0
 8004366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800436a:	bfac      	ite	ge
 800436c:	6563      	strge	r3, [r4, #84]	; 0x54
 800436e:	81a3      	strhlt	r3, [r4, #12]
 8004370:	bd10      	pop	{r4, pc}

08004372 <__swrite>:
 8004372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	461f      	mov	r7, r3
 8004378:	898b      	ldrh	r3, [r1, #12]
 800437a:	05db      	lsls	r3, r3, #23
 800437c:	4605      	mov	r5, r0
 800437e:	460c      	mov	r4, r1
 8004380:	4616      	mov	r6, r2
 8004382:	d505      	bpl.n	8004390 <__swrite+0x1e>
 8004384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004388:	2302      	movs	r3, #2
 800438a:	2200      	movs	r2, #0
 800438c:	f000 f9c8 	bl	8004720 <_lseek_r>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	4632      	mov	r2, r6
 800439e:	463b      	mov	r3, r7
 80043a0:	4628      	mov	r0, r5
 80043a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a6:	f000 b869 	b.w	800447c <_write_r>

080043aa <__sseek>:
 80043aa:	b510      	push	{r4, lr}
 80043ac:	460c      	mov	r4, r1
 80043ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b2:	f000 f9b5 	bl	8004720 <_lseek_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	bf15      	itete	ne
 80043bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043c6:	81a3      	strheq	r3, [r4, #12]
 80043c8:	bf18      	it	ne
 80043ca:	81a3      	strhne	r3, [r4, #12]
 80043cc:	bd10      	pop	{r4, pc}

080043ce <__sclose>:
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 b8d3 	b.w	800457c <_close_r>
	...

080043d8 <__swbuf_r>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	460e      	mov	r6, r1
 80043dc:	4614      	mov	r4, r2
 80043de:	4605      	mov	r5, r0
 80043e0:	b118      	cbz	r0, 80043ea <__swbuf_r+0x12>
 80043e2:	6983      	ldr	r3, [r0, #24]
 80043e4:	b90b      	cbnz	r3, 80043ea <__swbuf_r+0x12>
 80043e6:	f7ff fb81 	bl	8003aec <__sinit>
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <__swbuf_r+0x98>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	d12b      	bne.n	8004448 <__swbuf_r+0x70>
 80043f0:	686c      	ldr	r4, [r5, #4]
 80043f2:	69a3      	ldr	r3, [r4, #24]
 80043f4:	60a3      	str	r3, [r4, #8]
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	071a      	lsls	r2, r3, #28
 80043fa:	d52f      	bpl.n	800445c <__swbuf_r+0x84>
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	b36b      	cbz	r3, 800445c <__swbuf_r+0x84>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	1ac0      	subs	r0, r0, r3
 8004406:	6963      	ldr	r3, [r4, #20]
 8004408:	b2f6      	uxtb	r6, r6
 800440a:	4283      	cmp	r3, r0
 800440c:	4637      	mov	r7, r6
 800440e:	dc04      	bgt.n	800441a <__swbuf_r+0x42>
 8004410:	4621      	mov	r1, r4
 8004412:	4628      	mov	r0, r5
 8004414:	f000 f948 	bl	80046a8 <_fflush_r>
 8004418:	bb30      	cbnz	r0, 8004468 <__swbuf_r+0x90>
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	3b01      	subs	r3, #1
 800441e:	60a3      	str	r3, [r4, #8]
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	6022      	str	r2, [r4, #0]
 8004426:	701e      	strb	r6, [r3, #0]
 8004428:	6963      	ldr	r3, [r4, #20]
 800442a:	3001      	adds	r0, #1
 800442c:	4283      	cmp	r3, r0
 800442e:	d004      	beq.n	800443a <__swbuf_r+0x62>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	07db      	lsls	r3, r3, #31
 8004434:	d506      	bpl.n	8004444 <__swbuf_r+0x6c>
 8004436:	2e0a      	cmp	r6, #10
 8004438:	d104      	bne.n	8004444 <__swbuf_r+0x6c>
 800443a:	4621      	mov	r1, r4
 800443c:	4628      	mov	r0, r5
 800443e:	f000 f933 	bl	80046a8 <_fflush_r>
 8004442:	b988      	cbnz	r0, 8004468 <__swbuf_r+0x90>
 8004444:	4638      	mov	r0, r7
 8004446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <__swbuf_r+0x9c>)
 800444a:	429c      	cmp	r4, r3
 800444c:	d101      	bne.n	8004452 <__swbuf_r+0x7a>
 800444e:	68ac      	ldr	r4, [r5, #8]
 8004450:	e7cf      	b.n	80043f2 <__swbuf_r+0x1a>
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <__swbuf_r+0xa0>)
 8004454:	429c      	cmp	r4, r3
 8004456:	bf08      	it	eq
 8004458:	68ec      	ldreq	r4, [r5, #12]
 800445a:	e7ca      	b.n	80043f2 <__swbuf_r+0x1a>
 800445c:	4621      	mov	r1, r4
 800445e:	4628      	mov	r0, r5
 8004460:	f000 f81e 	bl	80044a0 <__swsetup_r>
 8004464:	2800      	cmp	r0, #0
 8004466:	d0cb      	beq.n	8004400 <__swbuf_r+0x28>
 8004468:	f04f 37ff 	mov.w	r7, #4294967295
 800446c:	e7ea      	b.n	8004444 <__swbuf_r+0x6c>
 800446e:	bf00      	nop
 8004470:	080049bc 	.word	0x080049bc
 8004474:	080049dc 	.word	0x080049dc
 8004478:	0800499c 	.word	0x0800499c

0800447c <_write_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4d07      	ldr	r5, [pc, #28]	; (800449c <_write_r+0x20>)
 8004480:	4604      	mov	r4, r0
 8004482:	4608      	mov	r0, r1
 8004484:	4611      	mov	r1, r2
 8004486:	2200      	movs	r2, #0
 8004488:	602a      	str	r2, [r5, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f7fc fa42 	bl	8000914 <_write>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_write_r+0x1e>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_write_r+0x1e>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000104 	.word	0x20000104

080044a0 <__swsetup_r>:
 80044a0:	4b32      	ldr	r3, [pc, #200]	; (800456c <__swsetup_r+0xcc>)
 80044a2:	b570      	push	{r4, r5, r6, lr}
 80044a4:	681d      	ldr	r5, [r3, #0]
 80044a6:	4606      	mov	r6, r0
 80044a8:	460c      	mov	r4, r1
 80044aa:	b125      	cbz	r5, 80044b6 <__swsetup_r+0x16>
 80044ac:	69ab      	ldr	r3, [r5, #24]
 80044ae:	b913      	cbnz	r3, 80044b6 <__swsetup_r+0x16>
 80044b0:	4628      	mov	r0, r5
 80044b2:	f7ff fb1b 	bl	8003aec <__sinit>
 80044b6:	4b2e      	ldr	r3, [pc, #184]	; (8004570 <__swsetup_r+0xd0>)
 80044b8:	429c      	cmp	r4, r3
 80044ba:	d10f      	bne.n	80044dc <__swsetup_r+0x3c>
 80044bc:	686c      	ldr	r4, [r5, #4]
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044c4:	0719      	lsls	r1, r3, #28
 80044c6:	d42c      	bmi.n	8004522 <__swsetup_r+0x82>
 80044c8:	06dd      	lsls	r5, r3, #27
 80044ca:	d411      	bmi.n	80044f0 <__swsetup_r+0x50>
 80044cc:	2309      	movs	r3, #9
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295
 80044da:	e03e      	b.n	800455a <__swsetup_r+0xba>
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <__swsetup_r+0xd4>)
 80044de:	429c      	cmp	r4, r3
 80044e0:	d101      	bne.n	80044e6 <__swsetup_r+0x46>
 80044e2:	68ac      	ldr	r4, [r5, #8]
 80044e4:	e7eb      	b.n	80044be <__swsetup_r+0x1e>
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <__swsetup_r+0xd8>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	bf08      	it	eq
 80044ec:	68ec      	ldreq	r4, [r5, #12]
 80044ee:	e7e6      	b.n	80044be <__swsetup_r+0x1e>
 80044f0:	0758      	lsls	r0, r3, #29
 80044f2:	d512      	bpl.n	800451a <__swsetup_r+0x7a>
 80044f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f6:	b141      	cbz	r1, 800450a <__swsetup_r+0x6a>
 80044f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044fc:	4299      	cmp	r1, r3
 80044fe:	d002      	beq.n	8004506 <__swsetup_r+0x66>
 8004500:	4630      	mov	r0, r6
 8004502:	f000 f991 	bl	8004828 <_free_r>
 8004506:	2300      	movs	r3, #0
 8004508:	6363      	str	r3, [r4, #52]	; 0x34
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	2300      	movs	r3, #0
 8004514:	6063      	str	r3, [r4, #4]
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	6923      	ldr	r3, [r4, #16]
 8004524:	b94b      	cbnz	r3, 800453a <__swsetup_r+0x9a>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800452c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004530:	d003      	beq.n	800453a <__swsetup_r+0x9a>
 8004532:	4621      	mov	r1, r4
 8004534:	4630      	mov	r0, r6
 8004536:	f000 f92b 	bl	8004790 <__smakebuf_r>
 800453a:	89a0      	ldrh	r0, [r4, #12]
 800453c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004540:	f010 0301 	ands.w	r3, r0, #1
 8004544:	d00a      	beq.n	800455c <__swsetup_r+0xbc>
 8004546:	2300      	movs	r3, #0
 8004548:	60a3      	str	r3, [r4, #8]
 800454a:	6963      	ldr	r3, [r4, #20]
 800454c:	425b      	negs	r3, r3
 800454e:	61a3      	str	r3, [r4, #24]
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	b943      	cbnz	r3, 8004566 <__swsetup_r+0xc6>
 8004554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004558:	d1ba      	bne.n	80044d0 <__swsetup_r+0x30>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	0781      	lsls	r1, r0, #30
 800455e:	bf58      	it	pl
 8004560:	6963      	ldrpl	r3, [r4, #20]
 8004562:	60a3      	str	r3, [r4, #8]
 8004564:	e7f4      	b.n	8004550 <__swsetup_r+0xb0>
 8004566:	2000      	movs	r0, #0
 8004568:	e7f7      	b.n	800455a <__swsetup_r+0xba>
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c
 8004570:	080049bc 	.word	0x080049bc
 8004574:	080049dc 	.word	0x080049dc
 8004578:	0800499c 	.word	0x0800499c

0800457c <_close_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	; (8004598 <_close_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc fac1 	bl	8000b0e <_close>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_close_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_close_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000104 	.word	0x20000104

0800459c <__sflush_r>:
 800459c:	898a      	ldrh	r2, [r1, #12]
 800459e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a2:	4605      	mov	r5, r0
 80045a4:	0710      	lsls	r0, r2, #28
 80045a6:	460c      	mov	r4, r1
 80045a8:	d458      	bmi.n	800465c <__sflush_r+0xc0>
 80045aa:	684b      	ldr	r3, [r1, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dc05      	bgt.n	80045bc <__sflush_r+0x20>
 80045b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	dc02      	bgt.n	80045bc <__sflush_r+0x20>
 80045b6:	2000      	movs	r0, #0
 80045b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045be:	2e00      	cmp	r6, #0
 80045c0:	d0f9      	beq.n	80045b6 <__sflush_r+0x1a>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045c8:	682f      	ldr	r7, [r5, #0]
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	d032      	beq.n	8004634 <__sflush_r+0x98>
 80045ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	075a      	lsls	r2, r3, #29
 80045d4:	d505      	bpl.n	80045e2 <__sflush_r+0x46>
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	1ac0      	subs	r0, r0, r3
 80045da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045dc:	b10b      	cbz	r3, 80045e2 <__sflush_r+0x46>
 80045de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045e0:	1ac0      	subs	r0, r0, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	4602      	mov	r2, r0
 80045e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045e8:	6a21      	ldr	r1, [r4, #32]
 80045ea:	4628      	mov	r0, r5
 80045ec:	47b0      	blx	r6
 80045ee:	1c43      	adds	r3, r0, #1
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	d106      	bne.n	8004602 <__sflush_r+0x66>
 80045f4:	6829      	ldr	r1, [r5, #0]
 80045f6:	291d      	cmp	r1, #29
 80045f8:	d82c      	bhi.n	8004654 <__sflush_r+0xb8>
 80045fa:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <__sflush_r+0x108>)
 80045fc:	40ca      	lsrs	r2, r1
 80045fe:	07d6      	lsls	r6, r2, #31
 8004600:	d528      	bpl.n	8004654 <__sflush_r+0xb8>
 8004602:	2200      	movs	r2, #0
 8004604:	6062      	str	r2, [r4, #4]
 8004606:	04d9      	lsls	r1, r3, #19
 8004608:	6922      	ldr	r2, [r4, #16]
 800460a:	6022      	str	r2, [r4, #0]
 800460c:	d504      	bpl.n	8004618 <__sflush_r+0x7c>
 800460e:	1c42      	adds	r2, r0, #1
 8004610:	d101      	bne.n	8004616 <__sflush_r+0x7a>
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	b903      	cbnz	r3, 8004618 <__sflush_r+0x7c>
 8004616:	6560      	str	r0, [r4, #84]	; 0x54
 8004618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800461a:	602f      	str	r7, [r5, #0]
 800461c:	2900      	cmp	r1, #0
 800461e:	d0ca      	beq.n	80045b6 <__sflush_r+0x1a>
 8004620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004624:	4299      	cmp	r1, r3
 8004626:	d002      	beq.n	800462e <__sflush_r+0x92>
 8004628:	4628      	mov	r0, r5
 800462a:	f000 f8fd 	bl	8004828 <_free_r>
 800462e:	2000      	movs	r0, #0
 8004630:	6360      	str	r0, [r4, #52]	; 0x34
 8004632:	e7c1      	b.n	80045b8 <__sflush_r+0x1c>
 8004634:	6a21      	ldr	r1, [r4, #32]
 8004636:	2301      	movs	r3, #1
 8004638:	4628      	mov	r0, r5
 800463a:	47b0      	blx	r6
 800463c:	1c41      	adds	r1, r0, #1
 800463e:	d1c7      	bne.n	80045d0 <__sflush_r+0x34>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0c4      	beq.n	80045d0 <__sflush_r+0x34>
 8004646:	2b1d      	cmp	r3, #29
 8004648:	d001      	beq.n	800464e <__sflush_r+0xb2>
 800464a:	2b16      	cmp	r3, #22
 800464c:	d101      	bne.n	8004652 <__sflush_r+0xb6>
 800464e:	602f      	str	r7, [r5, #0]
 8004650:	e7b1      	b.n	80045b6 <__sflush_r+0x1a>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	e7ad      	b.n	80045b8 <__sflush_r+0x1c>
 800465c:	690f      	ldr	r7, [r1, #16]
 800465e:	2f00      	cmp	r7, #0
 8004660:	d0a9      	beq.n	80045b6 <__sflush_r+0x1a>
 8004662:	0793      	lsls	r3, r2, #30
 8004664:	680e      	ldr	r6, [r1, #0]
 8004666:	bf08      	it	eq
 8004668:	694b      	ldreq	r3, [r1, #20]
 800466a:	600f      	str	r7, [r1, #0]
 800466c:	bf18      	it	ne
 800466e:	2300      	movne	r3, #0
 8004670:	eba6 0807 	sub.w	r8, r6, r7
 8004674:	608b      	str	r3, [r1, #8]
 8004676:	f1b8 0f00 	cmp.w	r8, #0
 800467a:	dd9c      	ble.n	80045b6 <__sflush_r+0x1a>
 800467c:	6a21      	ldr	r1, [r4, #32]
 800467e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004680:	4643      	mov	r3, r8
 8004682:	463a      	mov	r2, r7
 8004684:	4628      	mov	r0, r5
 8004686:	47b0      	blx	r6
 8004688:	2800      	cmp	r0, #0
 800468a:	dc06      	bgt.n	800469a <__sflush_r+0xfe>
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	e78e      	b.n	80045b8 <__sflush_r+0x1c>
 800469a:	4407      	add	r7, r0
 800469c:	eba8 0800 	sub.w	r8, r8, r0
 80046a0:	e7e9      	b.n	8004676 <__sflush_r+0xda>
 80046a2:	bf00      	nop
 80046a4:	20400001 	.word	0x20400001

080046a8 <_fflush_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	690b      	ldr	r3, [r1, #16]
 80046ac:	4605      	mov	r5, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	b913      	cbnz	r3, 80046b8 <_fflush_r+0x10>
 80046b2:	2500      	movs	r5, #0
 80046b4:	4628      	mov	r0, r5
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	b118      	cbz	r0, 80046c2 <_fflush_r+0x1a>
 80046ba:	6983      	ldr	r3, [r0, #24]
 80046bc:	b90b      	cbnz	r3, 80046c2 <_fflush_r+0x1a>
 80046be:	f7ff fa15 	bl	8003aec <__sinit>
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <_fflush_r+0x6c>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d11b      	bne.n	8004700 <_fflush_r+0x58>
 80046c8:	686c      	ldr	r4, [r5, #4]
 80046ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ef      	beq.n	80046b2 <_fflush_r+0xa>
 80046d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046d4:	07d0      	lsls	r0, r2, #31
 80046d6:	d404      	bmi.n	80046e2 <_fflush_r+0x3a>
 80046d8:	0599      	lsls	r1, r3, #22
 80046da:	d402      	bmi.n	80046e2 <_fflush_r+0x3a>
 80046dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046de:	f7ff faa3 	bl	8003c28 <__retarget_lock_acquire_recursive>
 80046e2:	4628      	mov	r0, r5
 80046e4:	4621      	mov	r1, r4
 80046e6:	f7ff ff59 	bl	800459c <__sflush_r>
 80046ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ec:	07da      	lsls	r2, r3, #31
 80046ee:	4605      	mov	r5, r0
 80046f0:	d4e0      	bmi.n	80046b4 <_fflush_r+0xc>
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	059b      	lsls	r3, r3, #22
 80046f6:	d4dd      	bmi.n	80046b4 <_fflush_r+0xc>
 80046f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046fa:	f7ff fa96 	bl	8003c2a <__retarget_lock_release_recursive>
 80046fe:	e7d9      	b.n	80046b4 <_fflush_r+0xc>
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <_fflush_r+0x70>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <_fflush_r+0x62>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7df      	b.n	80046ca <_fflush_r+0x22>
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <_fflush_r+0x74>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7da      	b.n	80046ca <_fflush_r+0x22>
 8004714:	080049bc 	.word	0x080049bc
 8004718:	080049dc 	.word	0x080049dc
 800471c:	0800499c 	.word	0x0800499c

08004720 <_lseek_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d07      	ldr	r5, [pc, #28]	; (8004740 <_lseek_r+0x20>)
 8004724:	4604      	mov	r4, r0
 8004726:	4608      	mov	r0, r1
 8004728:	4611      	mov	r1, r2
 800472a:	2200      	movs	r2, #0
 800472c:	602a      	str	r2, [r5, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	f7fc fa14 	bl	8000b5c <_lseek>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_lseek_r+0x1e>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_lseek_r+0x1e>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000104 	.word	0x20000104

08004744 <__swhatbuf_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	460e      	mov	r6, r1
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	2900      	cmp	r1, #0
 800474e:	b096      	sub	sp, #88	; 0x58
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	da08      	bge.n	8004768 <__swhatbuf_r+0x24>
 8004756:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	602a      	str	r2, [r5, #0]
 800475e:	061a      	lsls	r2, r3, #24
 8004760:	d410      	bmi.n	8004784 <__swhatbuf_r+0x40>
 8004762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004766:	e00e      	b.n	8004786 <__swhatbuf_r+0x42>
 8004768:	466a      	mov	r2, sp
 800476a:	f000 f8bb 	bl	80048e4 <_fstat_r>
 800476e:	2800      	cmp	r0, #0
 8004770:	dbf1      	blt.n	8004756 <__swhatbuf_r+0x12>
 8004772:	9a01      	ldr	r2, [sp, #4]
 8004774:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004778:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800477c:	425a      	negs	r2, r3
 800477e:	415a      	adcs	r2, r3
 8004780:	602a      	str	r2, [r5, #0]
 8004782:	e7ee      	b.n	8004762 <__swhatbuf_r+0x1e>
 8004784:	2340      	movs	r3, #64	; 0x40
 8004786:	2000      	movs	r0, #0
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	b016      	add	sp, #88	; 0x58
 800478c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004790 <__smakebuf_r>:
 8004790:	898b      	ldrh	r3, [r1, #12]
 8004792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004794:	079d      	lsls	r5, r3, #30
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	d507      	bpl.n	80047ac <__smakebuf_r+0x1c>
 800479c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	2301      	movs	r3, #1
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	b002      	add	sp, #8
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	ab01      	add	r3, sp, #4
 80047ae:	466a      	mov	r2, sp
 80047b0:	f7ff ffc8 	bl	8004744 <__swhatbuf_r>
 80047b4:	9900      	ldr	r1, [sp, #0]
 80047b6:	4605      	mov	r5, r0
 80047b8:	4630      	mov	r0, r6
 80047ba:	f7ff fa57 	bl	8003c6c <_malloc_r>
 80047be:	b948      	cbnz	r0, 80047d4 <__smakebuf_r+0x44>
 80047c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c4:	059a      	lsls	r2, r3, #22
 80047c6:	d4ef      	bmi.n	80047a8 <__smakebuf_r+0x18>
 80047c8:	f023 0303 	bic.w	r3, r3, #3
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	e7e3      	b.n	800479c <__smakebuf_r+0xc>
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <__smakebuf_r+0x7c>)
 80047d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	6020      	str	r0, [r4, #0]
 80047dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	9b00      	ldr	r3, [sp, #0]
 80047e4:	6163      	str	r3, [r4, #20]
 80047e6:	9b01      	ldr	r3, [sp, #4]
 80047e8:	6120      	str	r0, [r4, #16]
 80047ea:	b15b      	cbz	r3, 8004804 <__smakebuf_r+0x74>
 80047ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f889 	bl	8004908 <_isatty_r>
 80047f6:	b128      	cbz	r0, 8004804 <__smakebuf_r+0x74>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f023 0303 	bic.w	r3, r3, #3
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	89a0      	ldrh	r0, [r4, #12]
 8004806:	4305      	orrs	r5, r0
 8004808:	81a5      	strh	r5, [r4, #12]
 800480a:	e7cd      	b.n	80047a8 <__smakebuf_r+0x18>
 800480c:	08003a85 	.word	0x08003a85

08004810 <__malloc_lock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_lock+0x8>)
 8004812:	f7ff ba09 	b.w	8003c28 <__retarget_lock_acquire_recursive>
 8004816:	bf00      	nop
 8004818:	200000f8 	.word	0x200000f8

0800481c <__malloc_unlock>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__malloc_unlock+0x8>)
 800481e:	f7ff ba04 	b.w	8003c2a <__retarget_lock_release_recursive>
 8004822:	bf00      	nop
 8004824:	200000f8 	.word	0x200000f8

08004828 <_free_r>:
 8004828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800482a:	2900      	cmp	r1, #0
 800482c:	d044      	beq.n	80048b8 <_free_r+0x90>
 800482e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004832:	9001      	str	r0, [sp, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f1a1 0404 	sub.w	r4, r1, #4
 800483a:	bfb8      	it	lt
 800483c:	18e4      	addlt	r4, r4, r3
 800483e:	f7ff ffe7 	bl	8004810 <__malloc_lock>
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <_free_r+0x94>)
 8004844:	9801      	ldr	r0, [sp, #4]
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	b933      	cbnz	r3, 8004858 <_free_r+0x30>
 800484a:	6063      	str	r3, [r4, #4]
 800484c:	6014      	str	r4, [r2, #0]
 800484e:	b003      	add	sp, #12
 8004850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004854:	f7ff bfe2 	b.w	800481c <__malloc_unlock>
 8004858:	42a3      	cmp	r3, r4
 800485a:	d908      	bls.n	800486e <_free_r+0x46>
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	1961      	adds	r1, r4, r5
 8004860:	428b      	cmp	r3, r1
 8004862:	bf01      	itttt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	1949      	addeq	r1, r1, r5
 800486a:	6021      	streq	r1, [r4, #0]
 800486c:	e7ed      	b.n	800484a <_free_r+0x22>
 800486e:	461a      	mov	r2, r3
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b10b      	cbz	r3, 8004878 <_free_r+0x50>
 8004874:	42a3      	cmp	r3, r4
 8004876:	d9fa      	bls.n	800486e <_free_r+0x46>
 8004878:	6811      	ldr	r1, [r2, #0]
 800487a:	1855      	adds	r5, r2, r1
 800487c:	42a5      	cmp	r5, r4
 800487e:	d10b      	bne.n	8004898 <_free_r+0x70>
 8004880:	6824      	ldr	r4, [r4, #0]
 8004882:	4421      	add	r1, r4
 8004884:	1854      	adds	r4, r2, r1
 8004886:	42a3      	cmp	r3, r4
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	d1e0      	bne.n	800484e <_free_r+0x26>
 800488c:	681c      	ldr	r4, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	6053      	str	r3, [r2, #4]
 8004892:	4421      	add	r1, r4
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	e7da      	b.n	800484e <_free_r+0x26>
 8004898:	d902      	bls.n	80048a0 <_free_r+0x78>
 800489a:	230c      	movs	r3, #12
 800489c:	6003      	str	r3, [r0, #0]
 800489e:	e7d6      	b.n	800484e <_free_r+0x26>
 80048a0:	6825      	ldr	r5, [r4, #0]
 80048a2:	1961      	adds	r1, r4, r5
 80048a4:	428b      	cmp	r3, r1
 80048a6:	bf04      	itt	eq
 80048a8:	6819      	ldreq	r1, [r3, #0]
 80048aa:	685b      	ldreq	r3, [r3, #4]
 80048ac:	6063      	str	r3, [r4, #4]
 80048ae:	bf04      	itt	eq
 80048b0:	1949      	addeq	r1, r1, r5
 80048b2:	6021      	streq	r1, [r4, #0]
 80048b4:	6054      	str	r4, [r2, #4]
 80048b6:	e7ca      	b.n	800484e <_free_r+0x26>
 80048b8:	b003      	add	sp, #12
 80048ba:	bd30      	pop	{r4, r5, pc}
 80048bc:	200000fc 	.word	0x200000fc

080048c0 <_read_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	; (80048e0 <_read_r+0x20>)
 80048c4:	4604      	mov	r4, r0
 80048c6:	4608      	mov	r0, r1
 80048c8:	4611      	mov	r1, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fc f900 	bl	8000ad4 <_read>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_read_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_read_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	20000104 	.word	0x20000104

080048e4 <_fstat_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	; (8004904 <_fstat_r+0x20>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	602b      	str	r3, [r5, #0]
 80048f2:	f7fc f918 	bl	8000b26 <_fstat>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	d102      	bne.n	8004900 <_fstat_r+0x1c>
 80048fa:	682b      	ldr	r3, [r5, #0]
 80048fc:	b103      	cbz	r3, 8004900 <_fstat_r+0x1c>
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	bd38      	pop	{r3, r4, r5, pc}
 8004902:	bf00      	nop
 8004904:	20000104 	.word	0x20000104

08004908 <_isatty_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d06      	ldr	r5, [pc, #24]	; (8004924 <_isatty_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc f917 	bl	8000b46 <_isatty>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_isatty_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_isatty_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	20000104 	.word	0x20000104

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
